
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.4.2
 * Query Engine version: 57771c0558568c7d08bd34c7248af5244ae16bd9
 */
Prisma.prismaVersion = {
  client: "3.4.2",
  engine: "57771c0558568c7d08bd34c7248af5244ae16bd9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Inm_real_estateScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password'
});

exports.Prisma.Inm_userScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  first_name: 'first_name',
  last_name: 'last_name',
  dni: 'dni',
  personal_address: 'personal_address',
  work_address: 'work_address',
  phone: 'phone',
  cell_phone: 'cell_phone'
});

exports.Prisma.Inm_ownerScalarFieldEnum = makeEnum({
  id: 'id',
  id_user: 'id_user'
});

exports.Prisma.Inm_clientScalarFieldEnum = makeEnum({
  id: 'id',
  id_user: 'id_user'
});

exports.Prisma.Inm_billingScalarFieldEnum = makeEnum({
  id: 'id',
  id_client: 'id_client'
});

exports.Prisma.Inm_estateScalarFieldEnum = makeEnum({
  id: 'id',
  province: 'province',
  city: 'city',
  neighborhood: 'neighborhood',
  address: 'address',
  address_number: 'address_number',
  floor: 'floor',
  flat: 'flat',
  internal_number: 'internal_number',
  between_streets: 'between_streets',
  area_m2: 'area_m2',
  area_m3: 'area_m3',
  antique: 'antique',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  garages: 'garages',
  floors: 'floors',
  yard: 'yard',
  pool: 'pool',
  credit: 'credit',
  commercial_use: 'commercial_use',
  has_cartel: 'has_cartel',
  pets: 'pets',
  orientation: 'orientation',
  type_ceiling: 'type_ceiling',
  luminosity: 'luminosity',
  type: 'type',
  status: 'status',
  price: 'price',
  id_owner: 'id_owner',
  id_client: 'id_client'
});

exports.Prisma.Inm_prospective_buyersScalarFieldEnum = makeEnum({
  id: 'id',
  id_client: 'id_client',
  id_estate: 'id_estate'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.ceiling_type = makeEnum({
  Loza: 'Loza',
  Chapa: 'Chapa',
  Madera: 'Madera'
});

exports.luminosity_type = makeEnum({
  Buena: 'Buena',
  Regular: 'Regular',
  Mala: 'Mala'
});

exports.estate_type = makeEnum({
  Alquiler: 'Alquiler',
  Venta: 'Venta',
  Ambos: 'Ambos'
});

exports.estate_status = makeEnum({
  Alquilada: 'Alquilada',
  Vendida: 'Vendida',
  En_construccion: 'En_construccion',
  En_reparacion: 'En_reparacion',
  Disponible: 'Disponible'
});

exports.Prisma.ModelName = makeEnum({
  inm_real_estate: 'inm_real_estate',
  inm_user: 'inm_user',
  inm_owner: 'inm_owner',
  inm_client: 'inm_client',
  inm_billing: 'inm_billing',
  inm_estate: 'inm_estate',
  inm_prospective_buyers: 'inm_prospective_buyers'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
