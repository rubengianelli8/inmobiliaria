
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model inm_real_estate
 */

export type inm_real_estate = {
  id: number
  email: string
  password: string
}

/**
 * Model inm_user
 */

export type inm_user = {
  id: number
  email: string
  first_name: string
  last_name: string
}

/**
 * Model inm_owner
 */

export type inm_owner = {
  id: number
  id_user: number
}

/**
 * Model inm_client
 */

export type inm_client = {
  id: number
  id_user: number
}

/**
 * Model inm_billing
 */

export type inm_billing = {
  id: number
  id_client: number
}

/**
 * Model inm_estate
 */

export type inm_estate = {
  id: number
  address: string
  type: estate_type
  price: number
  id_owner: number
  id_client: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const estate_type: {
  alquiler: 'alquiler',
  venta: 'venta'
};

export type estate_type = (typeof estate_type)[keyof typeof estate_type]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Inm_real_estates
 * const inm_real_estates = await prisma.inm_real_estate.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Inm_real_estates
   * const inm_real_estates = await prisma.inm_real_estate.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.inm_real_estate`: Exposes CRUD operations for the **inm_real_estate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inm_real_estates
    * const inm_real_estates = await prisma.inm_real_estate.findMany()
    * ```
    */
  get inm_real_estate(): Prisma.inm_real_estateDelegate<GlobalReject>;

  /**
   * `prisma.inm_user`: Exposes CRUD operations for the **inm_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inm_users
    * const inm_users = await prisma.inm_user.findMany()
    * ```
    */
  get inm_user(): Prisma.inm_userDelegate<GlobalReject>;

  /**
   * `prisma.inm_owner`: Exposes CRUD operations for the **inm_owner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inm_owners
    * const inm_owners = await prisma.inm_owner.findMany()
    * ```
    */
  get inm_owner(): Prisma.inm_ownerDelegate<GlobalReject>;

  /**
   * `prisma.inm_client`: Exposes CRUD operations for the **inm_client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inm_clients
    * const inm_clients = await prisma.inm_client.findMany()
    * ```
    */
  get inm_client(): Prisma.inm_clientDelegate<GlobalReject>;

  /**
   * `prisma.inm_billing`: Exposes CRUD operations for the **inm_billing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inm_billings
    * const inm_billings = await prisma.inm_billing.findMany()
    * ```
    */
  get inm_billing(): Prisma.inm_billingDelegate<GlobalReject>;

  /**
   * `prisma.inm_estate`: Exposes CRUD operations for the **inm_estate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inm_estates
    * const inm_estates = await prisma.inm_estate.findMany()
    * ```
    */
  get inm_estate(): Prisma.inm_estateDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.4.2
   * Query Engine version: 57771c0558568c7d08bd34c7248af5244ae16bd9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    inm_real_estate: 'inm_real_estate',
    inm_user: 'inm_user',
    inm_owner: 'inm_owner',
    inm_client: 'inm_client',
    inm_billing: 'inm_billing',
    inm_estate: 'inm_estate'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Inm_userCountOutputType
   */


  export type Inm_userCountOutputType = {
    owner: number
    client: number
  }

  export type Inm_userCountOutputTypeSelect = {
    owner?: boolean
    client?: boolean
  }

  export type Inm_userCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Inm_userCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Inm_userCountOutputType
    : S extends undefined
    ? never
    : S extends Inm_userCountOutputTypeArgs
    ?'include' extends U
    ? Inm_userCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Inm_userCountOutputType ?Inm_userCountOutputType [P]
  : 
     never
  } 
    : Inm_userCountOutputType
  : Inm_userCountOutputType




  // Custom InputTypes

  /**
   * Inm_userCountOutputType without action
   */
  export type Inm_userCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Inm_userCountOutputType
     * 
    **/
    select?: Inm_userCountOutputTypeSelect | null
  }



  /**
   * Count Type Inm_ownerCountOutputType
   */


  export type Inm_ownerCountOutputType = {
    estates: number
  }

  export type Inm_ownerCountOutputTypeSelect = {
    estates?: boolean
  }

  export type Inm_ownerCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Inm_ownerCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Inm_ownerCountOutputType
    : S extends undefined
    ? never
    : S extends Inm_ownerCountOutputTypeArgs
    ?'include' extends U
    ? Inm_ownerCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Inm_ownerCountOutputType ?Inm_ownerCountOutputType [P]
  : 
     never
  } 
    : Inm_ownerCountOutputType
  : Inm_ownerCountOutputType




  // Custom InputTypes

  /**
   * Inm_ownerCountOutputType without action
   */
  export type Inm_ownerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Inm_ownerCountOutputType
     * 
    **/
    select?: Inm_ownerCountOutputTypeSelect | null
  }



  /**
   * Count Type Inm_clientCountOutputType
   */


  export type Inm_clientCountOutputType = {
    billing: number
    estate: number
  }

  export type Inm_clientCountOutputTypeSelect = {
    billing?: boolean
    estate?: boolean
  }

  export type Inm_clientCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Inm_clientCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Inm_clientCountOutputType
    : S extends undefined
    ? never
    : S extends Inm_clientCountOutputTypeArgs
    ?'include' extends U
    ? Inm_clientCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Inm_clientCountOutputType ?Inm_clientCountOutputType [P]
  : 
     never
  } 
    : Inm_clientCountOutputType
  : Inm_clientCountOutputType




  // Custom InputTypes

  /**
   * Inm_clientCountOutputType without action
   */
  export type Inm_clientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Inm_clientCountOutputType
     * 
    **/
    select?: Inm_clientCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model inm_real_estate
   */


  export type AggregateInm_real_estate = {
    _count: Inm_real_estateCountAggregateOutputType | null
    _avg: Inm_real_estateAvgAggregateOutputType | null
    _sum: Inm_real_estateSumAggregateOutputType | null
    _min: Inm_real_estateMinAggregateOutputType | null
    _max: Inm_real_estateMaxAggregateOutputType | null
  }

  export type Inm_real_estateAvgAggregateOutputType = {
    id: number | null
  }

  export type Inm_real_estateSumAggregateOutputType = {
    id: number | null
  }

  export type Inm_real_estateMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type Inm_real_estateMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type Inm_real_estateCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type Inm_real_estateAvgAggregateInputType = {
    id?: true
  }

  export type Inm_real_estateSumAggregateInputType = {
    id?: true
  }

  export type Inm_real_estateMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type Inm_real_estateMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type Inm_real_estateCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type Inm_real_estateAggregateArgs = {
    /**
     * Filter which inm_real_estate to aggregate.
     * 
    **/
    where?: inm_real_estateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_real_estates to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_real_estateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: inm_real_estateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_real_estates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_real_estates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inm_real_estates
    **/
    _count?: true | Inm_real_estateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inm_real_estateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inm_real_estateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inm_real_estateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inm_real_estateMaxAggregateInputType
  }

  export type GetInm_real_estateAggregateType<T extends Inm_real_estateAggregateArgs> = {
        [P in keyof T & keyof AggregateInm_real_estate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInm_real_estate[P]>
      : GetScalarType<T[P], AggregateInm_real_estate[P]>
  }


    
    
  export type Inm_real_estateGroupByArgs = {
    where?: inm_real_estateWhereInput
    orderBy?: Enumerable<inm_real_estateOrderByWithAggregationInput>
    by: Array<Inm_real_estateScalarFieldEnum>
    having?: inm_real_estateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inm_real_estateCountAggregateInputType | true
    _avg?: Inm_real_estateAvgAggregateInputType
    _sum?: Inm_real_estateSumAggregateInputType
    _min?: Inm_real_estateMinAggregateInputType
    _max?: Inm_real_estateMaxAggregateInputType
  }


  export type Inm_real_estateGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: Inm_real_estateCountAggregateOutputType | null
    _avg: Inm_real_estateAvgAggregateOutputType | null
    _sum: Inm_real_estateSumAggregateOutputType | null
    _min: Inm_real_estateMinAggregateOutputType | null
    _max: Inm_real_estateMaxAggregateOutputType | null
  }

  type GetInm_real_estateGroupByPayload<T extends Inm_real_estateGroupByArgs> = Promise<
    Array<
      PickArray<Inm_real_estateGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Inm_real_estateGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Inm_real_estateGroupByOutputType[P]> 
            : GetScalarType<T[P], Inm_real_estateGroupByOutputType[P]>
        }
      > 
    >


  export type inm_real_estateSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type inm_real_estateGetPayload<
    S extends boolean | null | undefined | inm_real_estateArgs,
    U = keyof S
      > = S extends true
        ? inm_real_estate
    : S extends undefined
    ? never
    : S extends inm_real_estateArgs | inm_real_estateFindManyArgs
    ?'include' extends U
    ? inm_real_estate 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof inm_real_estate ?inm_real_estate [P]
  : 
     never
  } 
    : inm_real_estate
  : inm_real_estate


  type inm_real_estateCountArgs = Merge<
    Omit<inm_real_estateFindManyArgs, 'select' | 'include'> & {
      select?: Inm_real_estateCountAggregateInputType | true
    }
  >

  export interface inm_real_estateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Inm_real_estate that matches the filter.
     * @param {inm_real_estateFindUniqueArgs} args - Arguments to find a Inm_real_estate
     * @example
     * // Get one Inm_real_estate
     * const inm_real_estate = await prisma.inm_real_estate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inm_real_estateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, inm_real_estateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'inm_real_estate'> extends True ? CheckSelect<T, Prisma__inm_real_estateClient<inm_real_estate>, Prisma__inm_real_estateClient<inm_real_estateGetPayload<T>>> : CheckSelect<T, Prisma__inm_real_estateClient<inm_real_estate | null >, Prisma__inm_real_estateClient<inm_real_estateGetPayload<T> | null >>

    /**
     * Find the first Inm_real_estate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_real_estateFindFirstArgs} args - Arguments to find a Inm_real_estate
     * @example
     * // Get one Inm_real_estate
     * const inm_real_estate = await prisma.inm_real_estate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inm_real_estateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, inm_real_estateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'inm_real_estate'> extends True ? CheckSelect<T, Prisma__inm_real_estateClient<inm_real_estate>, Prisma__inm_real_estateClient<inm_real_estateGetPayload<T>>> : CheckSelect<T, Prisma__inm_real_estateClient<inm_real_estate | null >, Prisma__inm_real_estateClient<inm_real_estateGetPayload<T> | null >>

    /**
     * Find zero or more Inm_real_estates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_real_estateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inm_real_estates
     * const inm_real_estates = await prisma.inm_real_estate.findMany()
     * 
     * // Get first 10 Inm_real_estates
     * const inm_real_estates = await prisma.inm_real_estate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inm_real_estateWithIdOnly = await prisma.inm_real_estate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends inm_real_estateFindManyArgs>(
      args?: SelectSubset<T, inm_real_estateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<inm_real_estate>>, PrismaPromise<Array<inm_real_estateGetPayload<T>>>>

    /**
     * Create a Inm_real_estate.
     * @param {inm_real_estateCreateArgs} args - Arguments to create a Inm_real_estate.
     * @example
     * // Create one Inm_real_estate
     * const Inm_real_estate = await prisma.inm_real_estate.create({
     *   data: {
     *     // ... data to create a Inm_real_estate
     *   }
     * })
     * 
    **/
    create<T extends inm_real_estateCreateArgs>(
      args: SelectSubset<T, inm_real_estateCreateArgs>
    ): CheckSelect<T, Prisma__inm_real_estateClient<inm_real_estate>, Prisma__inm_real_estateClient<inm_real_estateGetPayload<T>>>

    /**
     * Create many Inm_real_estates.
     *     @param {inm_real_estateCreateManyArgs} args - Arguments to create many Inm_real_estates.
     *     @example
     *     // Create many Inm_real_estates
     *     const inm_real_estate = await prisma.inm_real_estate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends inm_real_estateCreateManyArgs>(
      args?: SelectSubset<T, inm_real_estateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Inm_real_estate.
     * @param {inm_real_estateDeleteArgs} args - Arguments to delete one Inm_real_estate.
     * @example
     * // Delete one Inm_real_estate
     * const Inm_real_estate = await prisma.inm_real_estate.delete({
     *   where: {
     *     // ... filter to delete one Inm_real_estate
     *   }
     * })
     * 
    **/
    delete<T extends inm_real_estateDeleteArgs>(
      args: SelectSubset<T, inm_real_estateDeleteArgs>
    ): CheckSelect<T, Prisma__inm_real_estateClient<inm_real_estate>, Prisma__inm_real_estateClient<inm_real_estateGetPayload<T>>>

    /**
     * Update one Inm_real_estate.
     * @param {inm_real_estateUpdateArgs} args - Arguments to update one Inm_real_estate.
     * @example
     * // Update one Inm_real_estate
     * const inm_real_estate = await prisma.inm_real_estate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inm_real_estateUpdateArgs>(
      args: SelectSubset<T, inm_real_estateUpdateArgs>
    ): CheckSelect<T, Prisma__inm_real_estateClient<inm_real_estate>, Prisma__inm_real_estateClient<inm_real_estateGetPayload<T>>>

    /**
     * Delete zero or more Inm_real_estates.
     * @param {inm_real_estateDeleteManyArgs} args - Arguments to filter Inm_real_estates to delete.
     * @example
     * // Delete a few Inm_real_estates
     * const { count } = await prisma.inm_real_estate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inm_real_estateDeleteManyArgs>(
      args?: SelectSubset<T, inm_real_estateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inm_real_estates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_real_estateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inm_real_estates
     * const inm_real_estate = await prisma.inm_real_estate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inm_real_estateUpdateManyArgs>(
      args: SelectSubset<T, inm_real_estateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Inm_real_estate.
     * @param {inm_real_estateUpsertArgs} args - Arguments to update or create a Inm_real_estate.
     * @example
     * // Update or create a Inm_real_estate
     * const inm_real_estate = await prisma.inm_real_estate.upsert({
     *   create: {
     *     // ... data to create a Inm_real_estate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inm_real_estate we want to update
     *   }
     * })
    **/
    upsert<T extends inm_real_estateUpsertArgs>(
      args: SelectSubset<T, inm_real_estateUpsertArgs>
    ): CheckSelect<T, Prisma__inm_real_estateClient<inm_real_estate>, Prisma__inm_real_estateClient<inm_real_estateGetPayload<T>>>

    /**
     * Count the number of Inm_real_estates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_real_estateCountArgs} args - Arguments to filter Inm_real_estates to count.
     * @example
     * // Count the number of Inm_real_estates
     * const count = await prisma.inm_real_estate.count({
     *   where: {
     *     // ... the filter for the Inm_real_estates we want to count
     *   }
     * })
    **/
    count<T extends inm_real_estateCountArgs>(
      args?: Subset<T, inm_real_estateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inm_real_estateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inm_real_estate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_real_estateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inm_real_estateAggregateArgs>(args: Subset<T, Inm_real_estateAggregateArgs>): PrismaPromise<GetInm_real_estateAggregateType<T>>

    /**
     * Group by Inm_real_estate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_real_estateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Inm_real_estateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Inm_real_estateGroupByArgs['orderBy'] }
        : { orderBy?: Inm_real_estateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Inm_real_estateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInm_real_estateGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for inm_real_estate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__inm_real_estateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * inm_real_estate findUnique
   */
  export type inm_real_estateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the inm_real_estate
     * 
    **/
    select?: inm_real_estateSelect | null
    /**
     * Throw an Error if a inm_real_estate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_real_estate to fetch.
     * 
    **/
    where: inm_real_estateWhereUniqueInput
  }


  /**
   * inm_real_estate findFirst
   */
  export type inm_real_estateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the inm_real_estate
     * 
    **/
    select?: inm_real_estateSelect | null
    /**
     * Throw an Error if a inm_real_estate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_real_estate to fetch.
     * 
    **/
    where?: inm_real_estateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_real_estates to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_real_estateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inm_real_estates.
     * 
    **/
    cursor?: inm_real_estateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_real_estates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_real_estates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inm_real_estates.
     * 
    **/
    distinct?: Enumerable<Inm_real_estateScalarFieldEnum>
  }


  /**
   * inm_real_estate findMany
   */
  export type inm_real_estateFindManyArgs = {
    /**
     * Select specific fields to fetch from the inm_real_estate
     * 
    **/
    select?: inm_real_estateSelect | null
    /**
     * Filter, which inm_real_estates to fetch.
     * 
    **/
    where?: inm_real_estateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_real_estates to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_real_estateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inm_real_estates.
     * 
    **/
    cursor?: inm_real_estateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_real_estates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_real_estates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Inm_real_estateScalarFieldEnum>
  }


  /**
   * inm_real_estate create
   */
  export type inm_real_estateCreateArgs = {
    /**
     * Select specific fields to fetch from the inm_real_estate
     * 
    **/
    select?: inm_real_estateSelect | null
    /**
     * The data needed to create a inm_real_estate.
     * 
    **/
    data: XOR<inm_real_estateCreateInput, inm_real_estateUncheckedCreateInput>
  }


  /**
   * inm_real_estate createMany
   */
  export type inm_real_estateCreateManyArgs = {
    data: Enumerable<inm_real_estateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * inm_real_estate update
   */
  export type inm_real_estateUpdateArgs = {
    /**
     * Select specific fields to fetch from the inm_real_estate
     * 
    **/
    select?: inm_real_estateSelect | null
    /**
     * The data needed to update a inm_real_estate.
     * 
    **/
    data: XOR<inm_real_estateUpdateInput, inm_real_estateUncheckedUpdateInput>
    /**
     * Choose, which inm_real_estate to update.
     * 
    **/
    where: inm_real_estateWhereUniqueInput
  }


  /**
   * inm_real_estate updateMany
   */
  export type inm_real_estateUpdateManyArgs = {
    data: XOR<inm_real_estateUpdateManyMutationInput, inm_real_estateUncheckedUpdateManyInput>
    where?: inm_real_estateWhereInput
  }


  /**
   * inm_real_estate upsert
   */
  export type inm_real_estateUpsertArgs = {
    /**
     * Select specific fields to fetch from the inm_real_estate
     * 
    **/
    select?: inm_real_estateSelect | null
    /**
     * The filter to search for the inm_real_estate to update in case it exists.
     * 
    **/
    where: inm_real_estateWhereUniqueInput
    /**
     * In case the inm_real_estate found by the `where` argument doesn't exist, create a new inm_real_estate with this data.
     * 
    **/
    create: XOR<inm_real_estateCreateInput, inm_real_estateUncheckedCreateInput>
    /**
     * In case the inm_real_estate was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<inm_real_estateUpdateInput, inm_real_estateUncheckedUpdateInput>
  }


  /**
   * inm_real_estate delete
   */
  export type inm_real_estateDeleteArgs = {
    /**
     * Select specific fields to fetch from the inm_real_estate
     * 
    **/
    select?: inm_real_estateSelect | null
    /**
     * Filter which inm_real_estate to delete.
     * 
    **/
    where: inm_real_estateWhereUniqueInput
  }


  /**
   * inm_real_estate deleteMany
   */
  export type inm_real_estateDeleteManyArgs = {
    where?: inm_real_estateWhereInput
  }


  /**
   * inm_real_estate without action
   */
  export type inm_real_estateArgs = {
    /**
     * Select specific fields to fetch from the inm_real_estate
     * 
    **/
    select?: inm_real_estateSelect | null
  }



  /**
   * Model inm_user
   */


  export type AggregateInm_user = {
    _count: Inm_userCountAggregateOutputType | null
    _avg: Inm_userAvgAggregateOutputType | null
    _sum: Inm_userSumAggregateOutputType | null
    _min: Inm_userMinAggregateOutputType | null
    _max: Inm_userMaxAggregateOutputType | null
  }

  export type Inm_userAvgAggregateOutputType = {
    id: number | null
  }

  export type Inm_userSumAggregateOutputType = {
    id: number | null
  }

  export type Inm_userMinAggregateOutputType = {
    id: number | null
    email: string | null
    first_name: string | null
    last_name: string | null
  }

  export type Inm_userMaxAggregateOutputType = {
    id: number | null
    email: string | null
    first_name: string | null
    last_name: string | null
  }

  export type Inm_userCountAggregateOutputType = {
    id: number
    email: number
    first_name: number
    last_name: number
    _all: number
  }


  export type Inm_userAvgAggregateInputType = {
    id?: true
  }

  export type Inm_userSumAggregateInputType = {
    id?: true
  }

  export type Inm_userMinAggregateInputType = {
    id?: true
    email?: true
    first_name?: true
    last_name?: true
  }

  export type Inm_userMaxAggregateInputType = {
    id?: true
    email?: true
    first_name?: true
    last_name?: true
  }

  export type Inm_userCountAggregateInputType = {
    id?: true
    email?: true
    first_name?: true
    last_name?: true
    _all?: true
  }

  export type Inm_userAggregateArgs = {
    /**
     * Filter which inm_user to aggregate.
     * 
    **/
    where?: inm_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_users to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: inm_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inm_users
    **/
    _count?: true | Inm_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inm_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inm_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inm_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inm_userMaxAggregateInputType
  }

  export type GetInm_userAggregateType<T extends Inm_userAggregateArgs> = {
        [P in keyof T & keyof AggregateInm_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInm_user[P]>
      : GetScalarType<T[P], AggregateInm_user[P]>
  }


    
    
  export type Inm_userGroupByArgs = {
    where?: inm_userWhereInput
    orderBy?: Enumerable<inm_userOrderByWithAggregationInput>
    by: Array<Inm_userScalarFieldEnum>
    having?: inm_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inm_userCountAggregateInputType | true
    _avg?: Inm_userAvgAggregateInputType
    _sum?: Inm_userSumAggregateInputType
    _min?: Inm_userMinAggregateInputType
    _max?: Inm_userMaxAggregateInputType
  }


  export type Inm_userGroupByOutputType = {
    id: number
    email: string
    first_name: string
    last_name: string
    _count: Inm_userCountAggregateOutputType | null
    _avg: Inm_userAvgAggregateOutputType | null
    _sum: Inm_userSumAggregateOutputType | null
    _min: Inm_userMinAggregateOutputType | null
    _max: Inm_userMaxAggregateOutputType | null
  }

  type GetInm_userGroupByPayload<T extends Inm_userGroupByArgs> = Promise<
    Array<
      PickArray<Inm_userGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Inm_userGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Inm_userGroupByOutputType[P]> 
            : GetScalarType<T[P], Inm_userGroupByOutputType[P]>
        }
      > 
    >


  export type inm_userSelect = {
    id?: boolean
    email?: boolean
    first_name?: boolean
    last_name?: boolean
    owner?: boolean | inm_ownerFindManyArgs
    client?: boolean | inm_clientFindManyArgs
    _count?: boolean | Inm_userCountOutputTypeArgs
  }

  export type inm_userInclude = {
    owner?: boolean | inm_ownerFindManyArgs
    client?: boolean | inm_clientFindManyArgs
    _count?: boolean | Inm_userCountOutputTypeArgs
  }

  export type inm_userGetPayload<
    S extends boolean | null | undefined | inm_userArgs,
    U = keyof S
      > = S extends true
        ? inm_user
    : S extends undefined
    ? never
    : S extends inm_userArgs | inm_userFindManyArgs
    ?'include' extends U
    ? inm_user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'owner'
        ? Array < inm_ownerGetPayload<S['include'][P]>>  :
        P extends 'client'
        ? Array < inm_clientGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Inm_userCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof inm_user ?inm_user [P]
  : 
          P extends 'owner'
        ? Array < inm_ownerGetPayload<S['select'][P]>>  :
        P extends 'client'
        ? Array < inm_clientGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Inm_userCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : inm_user
  : inm_user


  type inm_userCountArgs = Merge<
    Omit<inm_userFindManyArgs, 'select' | 'include'> & {
      select?: Inm_userCountAggregateInputType | true
    }
  >

  export interface inm_userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Inm_user that matches the filter.
     * @param {inm_userFindUniqueArgs} args - Arguments to find a Inm_user
     * @example
     * // Get one Inm_user
     * const inm_user = await prisma.inm_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inm_userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, inm_userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'inm_user'> extends True ? CheckSelect<T, Prisma__inm_userClient<inm_user>, Prisma__inm_userClient<inm_userGetPayload<T>>> : CheckSelect<T, Prisma__inm_userClient<inm_user | null >, Prisma__inm_userClient<inm_userGetPayload<T> | null >>

    /**
     * Find the first Inm_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_userFindFirstArgs} args - Arguments to find a Inm_user
     * @example
     * // Get one Inm_user
     * const inm_user = await prisma.inm_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inm_userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, inm_userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'inm_user'> extends True ? CheckSelect<T, Prisma__inm_userClient<inm_user>, Prisma__inm_userClient<inm_userGetPayload<T>>> : CheckSelect<T, Prisma__inm_userClient<inm_user | null >, Prisma__inm_userClient<inm_userGetPayload<T> | null >>

    /**
     * Find zero or more Inm_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inm_users
     * const inm_users = await prisma.inm_user.findMany()
     * 
     * // Get first 10 Inm_users
     * const inm_users = await prisma.inm_user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inm_userWithIdOnly = await prisma.inm_user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends inm_userFindManyArgs>(
      args?: SelectSubset<T, inm_userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<inm_user>>, PrismaPromise<Array<inm_userGetPayload<T>>>>

    /**
     * Create a Inm_user.
     * @param {inm_userCreateArgs} args - Arguments to create a Inm_user.
     * @example
     * // Create one Inm_user
     * const Inm_user = await prisma.inm_user.create({
     *   data: {
     *     // ... data to create a Inm_user
     *   }
     * })
     * 
    **/
    create<T extends inm_userCreateArgs>(
      args: SelectSubset<T, inm_userCreateArgs>
    ): CheckSelect<T, Prisma__inm_userClient<inm_user>, Prisma__inm_userClient<inm_userGetPayload<T>>>

    /**
     * Create many Inm_users.
     *     @param {inm_userCreateManyArgs} args - Arguments to create many Inm_users.
     *     @example
     *     // Create many Inm_users
     *     const inm_user = await prisma.inm_user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends inm_userCreateManyArgs>(
      args?: SelectSubset<T, inm_userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Inm_user.
     * @param {inm_userDeleteArgs} args - Arguments to delete one Inm_user.
     * @example
     * // Delete one Inm_user
     * const Inm_user = await prisma.inm_user.delete({
     *   where: {
     *     // ... filter to delete one Inm_user
     *   }
     * })
     * 
    **/
    delete<T extends inm_userDeleteArgs>(
      args: SelectSubset<T, inm_userDeleteArgs>
    ): CheckSelect<T, Prisma__inm_userClient<inm_user>, Prisma__inm_userClient<inm_userGetPayload<T>>>

    /**
     * Update one Inm_user.
     * @param {inm_userUpdateArgs} args - Arguments to update one Inm_user.
     * @example
     * // Update one Inm_user
     * const inm_user = await prisma.inm_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inm_userUpdateArgs>(
      args: SelectSubset<T, inm_userUpdateArgs>
    ): CheckSelect<T, Prisma__inm_userClient<inm_user>, Prisma__inm_userClient<inm_userGetPayload<T>>>

    /**
     * Delete zero or more Inm_users.
     * @param {inm_userDeleteManyArgs} args - Arguments to filter Inm_users to delete.
     * @example
     * // Delete a few Inm_users
     * const { count } = await prisma.inm_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inm_userDeleteManyArgs>(
      args?: SelectSubset<T, inm_userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inm_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inm_users
     * const inm_user = await prisma.inm_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inm_userUpdateManyArgs>(
      args: SelectSubset<T, inm_userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Inm_user.
     * @param {inm_userUpsertArgs} args - Arguments to update or create a Inm_user.
     * @example
     * // Update or create a Inm_user
     * const inm_user = await prisma.inm_user.upsert({
     *   create: {
     *     // ... data to create a Inm_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inm_user we want to update
     *   }
     * })
    **/
    upsert<T extends inm_userUpsertArgs>(
      args: SelectSubset<T, inm_userUpsertArgs>
    ): CheckSelect<T, Prisma__inm_userClient<inm_user>, Prisma__inm_userClient<inm_userGetPayload<T>>>

    /**
     * Count the number of Inm_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_userCountArgs} args - Arguments to filter Inm_users to count.
     * @example
     * // Count the number of Inm_users
     * const count = await prisma.inm_user.count({
     *   where: {
     *     // ... the filter for the Inm_users we want to count
     *   }
     * })
    **/
    count<T extends inm_userCountArgs>(
      args?: Subset<T, inm_userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inm_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inm_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inm_userAggregateArgs>(args: Subset<T, Inm_userAggregateArgs>): PrismaPromise<GetInm_userAggregateType<T>>

    /**
     * Group by Inm_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Inm_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Inm_userGroupByArgs['orderBy'] }
        : { orderBy?: Inm_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Inm_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInm_userGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for inm_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__inm_userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends inm_ownerFindManyArgs = {}>(args?: Subset<T, inm_ownerFindManyArgs>): CheckSelect<T, PrismaPromise<Array<inm_owner>>, PrismaPromise<Array<inm_ownerGetPayload<T>>>>;

    client<T extends inm_clientFindManyArgs = {}>(args?: Subset<T, inm_clientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<inm_client>>, PrismaPromise<Array<inm_clientGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * inm_user findUnique
   */
  export type inm_userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the inm_user
     * 
    **/
    select?: inm_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_userInclude | null
    /**
     * Throw an Error if a inm_user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_user to fetch.
     * 
    **/
    where: inm_userWhereUniqueInput
  }


  /**
   * inm_user findFirst
   */
  export type inm_userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the inm_user
     * 
    **/
    select?: inm_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_userInclude | null
    /**
     * Throw an Error if a inm_user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_user to fetch.
     * 
    **/
    where?: inm_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_users to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inm_users.
     * 
    **/
    cursor?: inm_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inm_users.
     * 
    **/
    distinct?: Enumerable<Inm_userScalarFieldEnum>
  }


  /**
   * inm_user findMany
   */
  export type inm_userFindManyArgs = {
    /**
     * Select specific fields to fetch from the inm_user
     * 
    **/
    select?: inm_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_userInclude | null
    /**
     * Filter, which inm_users to fetch.
     * 
    **/
    where?: inm_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_users to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inm_users.
     * 
    **/
    cursor?: inm_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Inm_userScalarFieldEnum>
  }


  /**
   * inm_user create
   */
  export type inm_userCreateArgs = {
    /**
     * Select specific fields to fetch from the inm_user
     * 
    **/
    select?: inm_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_userInclude | null
    /**
     * The data needed to create a inm_user.
     * 
    **/
    data: XOR<inm_userCreateInput, inm_userUncheckedCreateInput>
  }


  /**
   * inm_user createMany
   */
  export type inm_userCreateManyArgs = {
    data: Enumerable<inm_userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * inm_user update
   */
  export type inm_userUpdateArgs = {
    /**
     * Select specific fields to fetch from the inm_user
     * 
    **/
    select?: inm_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_userInclude | null
    /**
     * The data needed to update a inm_user.
     * 
    **/
    data: XOR<inm_userUpdateInput, inm_userUncheckedUpdateInput>
    /**
     * Choose, which inm_user to update.
     * 
    **/
    where: inm_userWhereUniqueInput
  }


  /**
   * inm_user updateMany
   */
  export type inm_userUpdateManyArgs = {
    data: XOR<inm_userUpdateManyMutationInput, inm_userUncheckedUpdateManyInput>
    where?: inm_userWhereInput
  }


  /**
   * inm_user upsert
   */
  export type inm_userUpsertArgs = {
    /**
     * Select specific fields to fetch from the inm_user
     * 
    **/
    select?: inm_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_userInclude | null
    /**
     * The filter to search for the inm_user to update in case it exists.
     * 
    **/
    where: inm_userWhereUniqueInput
    /**
     * In case the inm_user found by the `where` argument doesn't exist, create a new inm_user with this data.
     * 
    **/
    create: XOR<inm_userCreateInput, inm_userUncheckedCreateInput>
    /**
     * In case the inm_user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<inm_userUpdateInput, inm_userUncheckedUpdateInput>
  }


  /**
   * inm_user delete
   */
  export type inm_userDeleteArgs = {
    /**
     * Select specific fields to fetch from the inm_user
     * 
    **/
    select?: inm_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_userInclude | null
    /**
     * Filter which inm_user to delete.
     * 
    **/
    where: inm_userWhereUniqueInput
  }


  /**
   * inm_user deleteMany
   */
  export type inm_userDeleteManyArgs = {
    where?: inm_userWhereInput
  }


  /**
   * inm_user without action
   */
  export type inm_userArgs = {
    /**
     * Select specific fields to fetch from the inm_user
     * 
    **/
    select?: inm_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_userInclude | null
  }



  /**
   * Model inm_owner
   */


  export type AggregateInm_owner = {
    _count: Inm_ownerCountAggregateOutputType | null
    _avg: Inm_ownerAvgAggregateOutputType | null
    _sum: Inm_ownerSumAggregateOutputType | null
    _min: Inm_ownerMinAggregateOutputType | null
    _max: Inm_ownerMaxAggregateOutputType | null
  }

  export type Inm_ownerAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type Inm_ownerSumAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type Inm_ownerMinAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type Inm_ownerMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type Inm_ownerCountAggregateOutputType = {
    id: number
    id_user: number
    _all: number
  }


  export type Inm_ownerAvgAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type Inm_ownerSumAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type Inm_ownerMinAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type Inm_ownerMaxAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type Inm_ownerCountAggregateInputType = {
    id?: true
    id_user?: true
    _all?: true
  }

  export type Inm_ownerAggregateArgs = {
    /**
     * Filter which inm_owner to aggregate.
     * 
    **/
    where?: inm_ownerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_owners to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_ownerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: inm_ownerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_owners from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_owners.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inm_owners
    **/
    _count?: true | Inm_ownerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inm_ownerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inm_ownerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inm_ownerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inm_ownerMaxAggregateInputType
  }

  export type GetInm_ownerAggregateType<T extends Inm_ownerAggregateArgs> = {
        [P in keyof T & keyof AggregateInm_owner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInm_owner[P]>
      : GetScalarType<T[P], AggregateInm_owner[P]>
  }


    
    
  export type Inm_ownerGroupByArgs = {
    where?: inm_ownerWhereInput
    orderBy?: Enumerable<inm_ownerOrderByWithAggregationInput>
    by: Array<Inm_ownerScalarFieldEnum>
    having?: inm_ownerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inm_ownerCountAggregateInputType | true
    _avg?: Inm_ownerAvgAggregateInputType
    _sum?: Inm_ownerSumAggregateInputType
    _min?: Inm_ownerMinAggregateInputType
    _max?: Inm_ownerMaxAggregateInputType
  }


  export type Inm_ownerGroupByOutputType = {
    id: number
    id_user: number
    _count: Inm_ownerCountAggregateOutputType | null
    _avg: Inm_ownerAvgAggregateOutputType | null
    _sum: Inm_ownerSumAggregateOutputType | null
    _min: Inm_ownerMinAggregateOutputType | null
    _max: Inm_ownerMaxAggregateOutputType | null
  }

  type GetInm_ownerGroupByPayload<T extends Inm_ownerGroupByArgs> = Promise<
    Array<
      PickArray<Inm_ownerGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Inm_ownerGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Inm_ownerGroupByOutputType[P]> 
            : GetScalarType<T[P], Inm_ownerGroupByOutputType[P]>
        }
      > 
    >


  export type inm_ownerSelect = {
    id?: boolean
    id_user?: boolean
    user?: boolean | inm_userArgs
    estates?: boolean | inm_estateFindManyArgs
    _count?: boolean | Inm_ownerCountOutputTypeArgs
  }

  export type inm_ownerInclude = {
    user?: boolean | inm_userArgs
    estates?: boolean | inm_estateFindManyArgs
    _count?: boolean | Inm_ownerCountOutputTypeArgs
  }

  export type inm_ownerGetPayload<
    S extends boolean | null | undefined | inm_ownerArgs,
    U = keyof S
      > = S extends true
        ? inm_owner
    : S extends undefined
    ? never
    : S extends inm_ownerArgs | inm_ownerFindManyArgs
    ?'include' extends U
    ? inm_owner  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? inm_userGetPayload<S['include'][P]> :
        P extends 'estates'
        ? Array < inm_estateGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Inm_ownerCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof inm_owner ?inm_owner [P]
  : 
          P extends 'user'
        ? inm_userGetPayload<S['select'][P]> :
        P extends 'estates'
        ? Array < inm_estateGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Inm_ownerCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : inm_owner
  : inm_owner


  type inm_ownerCountArgs = Merge<
    Omit<inm_ownerFindManyArgs, 'select' | 'include'> & {
      select?: Inm_ownerCountAggregateInputType | true
    }
  >

  export interface inm_ownerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Inm_owner that matches the filter.
     * @param {inm_ownerFindUniqueArgs} args - Arguments to find a Inm_owner
     * @example
     * // Get one Inm_owner
     * const inm_owner = await prisma.inm_owner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inm_ownerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, inm_ownerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'inm_owner'> extends True ? CheckSelect<T, Prisma__inm_ownerClient<inm_owner>, Prisma__inm_ownerClient<inm_ownerGetPayload<T>>> : CheckSelect<T, Prisma__inm_ownerClient<inm_owner | null >, Prisma__inm_ownerClient<inm_ownerGetPayload<T> | null >>

    /**
     * Find the first Inm_owner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_ownerFindFirstArgs} args - Arguments to find a Inm_owner
     * @example
     * // Get one Inm_owner
     * const inm_owner = await prisma.inm_owner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inm_ownerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, inm_ownerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'inm_owner'> extends True ? CheckSelect<T, Prisma__inm_ownerClient<inm_owner>, Prisma__inm_ownerClient<inm_ownerGetPayload<T>>> : CheckSelect<T, Prisma__inm_ownerClient<inm_owner | null >, Prisma__inm_ownerClient<inm_ownerGetPayload<T> | null >>

    /**
     * Find zero or more Inm_owners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_ownerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inm_owners
     * const inm_owners = await prisma.inm_owner.findMany()
     * 
     * // Get first 10 Inm_owners
     * const inm_owners = await prisma.inm_owner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inm_ownerWithIdOnly = await prisma.inm_owner.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends inm_ownerFindManyArgs>(
      args?: SelectSubset<T, inm_ownerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<inm_owner>>, PrismaPromise<Array<inm_ownerGetPayload<T>>>>

    /**
     * Create a Inm_owner.
     * @param {inm_ownerCreateArgs} args - Arguments to create a Inm_owner.
     * @example
     * // Create one Inm_owner
     * const Inm_owner = await prisma.inm_owner.create({
     *   data: {
     *     // ... data to create a Inm_owner
     *   }
     * })
     * 
    **/
    create<T extends inm_ownerCreateArgs>(
      args: SelectSubset<T, inm_ownerCreateArgs>
    ): CheckSelect<T, Prisma__inm_ownerClient<inm_owner>, Prisma__inm_ownerClient<inm_ownerGetPayload<T>>>

    /**
     * Create many Inm_owners.
     *     @param {inm_ownerCreateManyArgs} args - Arguments to create many Inm_owners.
     *     @example
     *     // Create many Inm_owners
     *     const inm_owner = await prisma.inm_owner.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends inm_ownerCreateManyArgs>(
      args?: SelectSubset<T, inm_ownerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Inm_owner.
     * @param {inm_ownerDeleteArgs} args - Arguments to delete one Inm_owner.
     * @example
     * // Delete one Inm_owner
     * const Inm_owner = await prisma.inm_owner.delete({
     *   where: {
     *     // ... filter to delete one Inm_owner
     *   }
     * })
     * 
    **/
    delete<T extends inm_ownerDeleteArgs>(
      args: SelectSubset<T, inm_ownerDeleteArgs>
    ): CheckSelect<T, Prisma__inm_ownerClient<inm_owner>, Prisma__inm_ownerClient<inm_ownerGetPayload<T>>>

    /**
     * Update one Inm_owner.
     * @param {inm_ownerUpdateArgs} args - Arguments to update one Inm_owner.
     * @example
     * // Update one Inm_owner
     * const inm_owner = await prisma.inm_owner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inm_ownerUpdateArgs>(
      args: SelectSubset<T, inm_ownerUpdateArgs>
    ): CheckSelect<T, Prisma__inm_ownerClient<inm_owner>, Prisma__inm_ownerClient<inm_ownerGetPayload<T>>>

    /**
     * Delete zero or more Inm_owners.
     * @param {inm_ownerDeleteManyArgs} args - Arguments to filter Inm_owners to delete.
     * @example
     * // Delete a few Inm_owners
     * const { count } = await prisma.inm_owner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inm_ownerDeleteManyArgs>(
      args?: SelectSubset<T, inm_ownerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inm_owners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_ownerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inm_owners
     * const inm_owner = await prisma.inm_owner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inm_ownerUpdateManyArgs>(
      args: SelectSubset<T, inm_ownerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Inm_owner.
     * @param {inm_ownerUpsertArgs} args - Arguments to update or create a Inm_owner.
     * @example
     * // Update or create a Inm_owner
     * const inm_owner = await prisma.inm_owner.upsert({
     *   create: {
     *     // ... data to create a Inm_owner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inm_owner we want to update
     *   }
     * })
    **/
    upsert<T extends inm_ownerUpsertArgs>(
      args: SelectSubset<T, inm_ownerUpsertArgs>
    ): CheckSelect<T, Prisma__inm_ownerClient<inm_owner>, Prisma__inm_ownerClient<inm_ownerGetPayload<T>>>

    /**
     * Count the number of Inm_owners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_ownerCountArgs} args - Arguments to filter Inm_owners to count.
     * @example
     * // Count the number of Inm_owners
     * const count = await prisma.inm_owner.count({
     *   where: {
     *     // ... the filter for the Inm_owners we want to count
     *   }
     * })
    **/
    count<T extends inm_ownerCountArgs>(
      args?: Subset<T, inm_ownerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inm_ownerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inm_owner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_ownerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inm_ownerAggregateArgs>(args: Subset<T, Inm_ownerAggregateArgs>): PrismaPromise<GetInm_ownerAggregateType<T>>

    /**
     * Group by Inm_owner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_ownerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Inm_ownerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Inm_ownerGroupByArgs['orderBy'] }
        : { orderBy?: Inm_ownerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Inm_ownerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInm_ownerGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for inm_owner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__inm_ownerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends inm_userArgs = {}>(args?: Subset<T, inm_userArgs>): CheckSelect<T, Prisma__inm_userClient<inm_user | null >, Prisma__inm_userClient<inm_userGetPayload<T> | null >>;

    estates<T extends inm_estateFindManyArgs = {}>(args?: Subset<T, inm_estateFindManyArgs>): CheckSelect<T, PrismaPromise<Array<inm_estate>>, PrismaPromise<Array<inm_estateGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * inm_owner findUnique
   */
  export type inm_ownerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the inm_owner
     * 
    **/
    select?: inm_ownerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_ownerInclude | null
    /**
     * Throw an Error if a inm_owner can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_owner to fetch.
     * 
    **/
    where: inm_ownerWhereUniqueInput
  }


  /**
   * inm_owner findFirst
   */
  export type inm_ownerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the inm_owner
     * 
    **/
    select?: inm_ownerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_ownerInclude | null
    /**
     * Throw an Error if a inm_owner can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_owner to fetch.
     * 
    **/
    where?: inm_ownerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_owners to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_ownerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inm_owners.
     * 
    **/
    cursor?: inm_ownerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_owners from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_owners.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inm_owners.
     * 
    **/
    distinct?: Enumerable<Inm_ownerScalarFieldEnum>
  }


  /**
   * inm_owner findMany
   */
  export type inm_ownerFindManyArgs = {
    /**
     * Select specific fields to fetch from the inm_owner
     * 
    **/
    select?: inm_ownerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_ownerInclude | null
    /**
     * Filter, which inm_owners to fetch.
     * 
    **/
    where?: inm_ownerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_owners to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_ownerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inm_owners.
     * 
    **/
    cursor?: inm_ownerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_owners from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_owners.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Inm_ownerScalarFieldEnum>
  }


  /**
   * inm_owner create
   */
  export type inm_ownerCreateArgs = {
    /**
     * Select specific fields to fetch from the inm_owner
     * 
    **/
    select?: inm_ownerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_ownerInclude | null
    /**
     * The data needed to create a inm_owner.
     * 
    **/
    data: XOR<inm_ownerCreateInput, inm_ownerUncheckedCreateInput>
  }


  /**
   * inm_owner createMany
   */
  export type inm_ownerCreateManyArgs = {
    data: Enumerable<inm_ownerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * inm_owner update
   */
  export type inm_ownerUpdateArgs = {
    /**
     * Select specific fields to fetch from the inm_owner
     * 
    **/
    select?: inm_ownerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_ownerInclude | null
    /**
     * The data needed to update a inm_owner.
     * 
    **/
    data: XOR<inm_ownerUpdateInput, inm_ownerUncheckedUpdateInput>
    /**
     * Choose, which inm_owner to update.
     * 
    **/
    where: inm_ownerWhereUniqueInput
  }


  /**
   * inm_owner updateMany
   */
  export type inm_ownerUpdateManyArgs = {
    data: XOR<inm_ownerUpdateManyMutationInput, inm_ownerUncheckedUpdateManyInput>
    where?: inm_ownerWhereInput
  }


  /**
   * inm_owner upsert
   */
  export type inm_ownerUpsertArgs = {
    /**
     * Select specific fields to fetch from the inm_owner
     * 
    **/
    select?: inm_ownerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_ownerInclude | null
    /**
     * The filter to search for the inm_owner to update in case it exists.
     * 
    **/
    where: inm_ownerWhereUniqueInput
    /**
     * In case the inm_owner found by the `where` argument doesn't exist, create a new inm_owner with this data.
     * 
    **/
    create: XOR<inm_ownerCreateInput, inm_ownerUncheckedCreateInput>
    /**
     * In case the inm_owner was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<inm_ownerUpdateInput, inm_ownerUncheckedUpdateInput>
  }


  /**
   * inm_owner delete
   */
  export type inm_ownerDeleteArgs = {
    /**
     * Select specific fields to fetch from the inm_owner
     * 
    **/
    select?: inm_ownerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_ownerInclude | null
    /**
     * Filter which inm_owner to delete.
     * 
    **/
    where: inm_ownerWhereUniqueInput
  }


  /**
   * inm_owner deleteMany
   */
  export type inm_ownerDeleteManyArgs = {
    where?: inm_ownerWhereInput
  }


  /**
   * inm_owner without action
   */
  export type inm_ownerArgs = {
    /**
     * Select specific fields to fetch from the inm_owner
     * 
    **/
    select?: inm_ownerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_ownerInclude | null
  }



  /**
   * Model inm_client
   */


  export type AggregateInm_client = {
    _count: Inm_clientCountAggregateOutputType | null
    _avg: Inm_clientAvgAggregateOutputType | null
    _sum: Inm_clientSumAggregateOutputType | null
    _min: Inm_clientMinAggregateOutputType | null
    _max: Inm_clientMaxAggregateOutputType | null
  }

  export type Inm_clientAvgAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type Inm_clientSumAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type Inm_clientMinAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type Inm_clientMaxAggregateOutputType = {
    id: number | null
    id_user: number | null
  }

  export type Inm_clientCountAggregateOutputType = {
    id: number
    id_user: number
    _all: number
  }


  export type Inm_clientAvgAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type Inm_clientSumAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type Inm_clientMinAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type Inm_clientMaxAggregateInputType = {
    id?: true
    id_user?: true
  }

  export type Inm_clientCountAggregateInputType = {
    id?: true
    id_user?: true
    _all?: true
  }

  export type Inm_clientAggregateArgs = {
    /**
     * Filter which inm_client to aggregate.
     * 
    **/
    where?: inm_clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_clientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: inm_clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inm_clients
    **/
    _count?: true | Inm_clientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inm_clientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inm_clientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inm_clientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inm_clientMaxAggregateInputType
  }

  export type GetInm_clientAggregateType<T extends Inm_clientAggregateArgs> = {
        [P in keyof T & keyof AggregateInm_client]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInm_client[P]>
      : GetScalarType<T[P], AggregateInm_client[P]>
  }


    
    
  export type Inm_clientGroupByArgs = {
    where?: inm_clientWhereInput
    orderBy?: Enumerable<inm_clientOrderByWithAggregationInput>
    by: Array<Inm_clientScalarFieldEnum>
    having?: inm_clientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inm_clientCountAggregateInputType | true
    _avg?: Inm_clientAvgAggregateInputType
    _sum?: Inm_clientSumAggregateInputType
    _min?: Inm_clientMinAggregateInputType
    _max?: Inm_clientMaxAggregateInputType
  }


  export type Inm_clientGroupByOutputType = {
    id: number
    id_user: number
    _count: Inm_clientCountAggregateOutputType | null
    _avg: Inm_clientAvgAggregateOutputType | null
    _sum: Inm_clientSumAggregateOutputType | null
    _min: Inm_clientMinAggregateOutputType | null
    _max: Inm_clientMaxAggregateOutputType | null
  }

  type GetInm_clientGroupByPayload<T extends Inm_clientGroupByArgs> = Promise<
    Array<
      PickArray<Inm_clientGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Inm_clientGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Inm_clientGroupByOutputType[P]> 
            : GetScalarType<T[P], Inm_clientGroupByOutputType[P]>
        }
      > 
    >


  export type inm_clientSelect = {
    id?: boolean
    id_user?: boolean
    user?: boolean | inm_userArgs
    billing?: boolean | inm_billingFindManyArgs
    estate?: boolean | inm_estateFindManyArgs
    _count?: boolean | Inm_clientCountOutputTypeArgs
  }

  export type inm_clientInclude = {
    user?: boolean | inm_userArgs
    billing?: boolean | inm_billingFindManyArgs
    estate?: boolean | inm_estateFindManyArgs
    _count?: boolean | Inm_clientCountOutputTypeArgs
  }

  export type inm_clientGetPayload<
    S extends boolean | null | undefined | inm_clientArgs,
    U = keyof S
      > = S extends true
        ? inm_client
    : S extends undefined
    ? never
    : S extends inm_clientArgs | inm_clientFindManyArgs
    ?'include' extends U
    ? inm_client  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? inm_userGetPayload<S['include'][P]> :
        P extends 'billing'
        ? Array < inm_billingGetPayload<S['include'][P]>>  :
        P extends 'estate'
        ? Array < inm_estateGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Inm_clientCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof inm_client ?inm_client [P]
  : 
          P extends 'user'
        ? inm_userGetPayload<S['select'][P]> :
        P extends 'billing'
        ? Array < inm_billingGetPayload<S['select'][P]>>  :
        P extends 'estate'
        ? Array < inm_estateGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Inm_clientCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : inm_client
  : inm_client


  type inm_clientCountArgs = Merge<
    Omit<inm_clientFindManyArgs, 'select' | 'include'> & {
      select?: Inm_clientCountAggregateInputType | true
    }
  >

  export interface inm_clientDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Inm_client that matches the filter.
     * @param {inm_clientFindUniqueArgs} args - Arguments to find a Inm_client
     * @example
     * // Get one Inm_client
     * const inm_client = await prisma.inm_client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inm_clientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, inm_clientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'inm_client'> extends True ? CheckSelect<T, Prisma__inm_clientClient<inm_client>, Prisma__inm_clientClient<inm_clientGetPayload<T>>> : CheckSelect<T, Prisma__inm_clientClient<inm_client | null >, Prisma__inm_clientClient<inm_clientGetPayload<T> | null >>

    /**
     * Find the first Inm_client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_clientFindFirstArgs} args - Arguments to find a Inm_client
     * @example
     * // Get one Inm_client
     * const inm_client = await prisma.inm_client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inm_clientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, inm_clientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'inm_client'> extends True ? CheckSelect<T, Prisma__inm_clientClient<inm_client>, Prisma__inm_clientClient<inm_clientGetPayload<T>>> : CheckSelect<T, Prisma__inm_clientClient<inm_client | null >, Prisma__inm_clientClient<inm_clientGetPayload<T> | null >>

    /**
     * Find zero or more Inm_clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_clientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inm_clients
     * const inm_clients = await prisma.inm_client.findMany()
     * 
     * // Get first 10 Inm_clients
     * const inm_clients = await prisma.inm_client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inm_clientWithIdOnly = await prisma.inm_client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends inm_clientFindManyArgs>(
      args?: SelectSubset<T, inm_clientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<inm_client>>, PrismaPromise<Array<inm_clientGetPayload<T>>>>

    /**
     * Create a Inm_client.
     * @param {inm_clientCreateArgs} args - Arguments to create a Inm_client.
     * @example
     * // Create one Inm_client
     * const Inm_client = await prisma.inm_client.create({
     *   data: {
     *     // ... data to create a Inm_client
     *   }
     * })
     * 
    **/
    create<T extends inm_clientCreateArgs>(
      args: SelectSubset<T, inm_clientCreateArgs>
    ): CheckSelect<T, Prisma__inm_clientClient<inm_client>, Prisma__inm_clientClient<inm_clientGetPayload<T>>>

    /**
     * Create many Inm_clients.
     *     @param {inm_clientCreateManyArgs} args - Arguments to create many Inm_clients.
     *     @example
     *     // Create many Inm_clients
     *     const inm_client = await prisma.inm_client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends inm_clientCreateManyArgs>(
      args?: SelectSubset<T, inm_clientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Inm_client.
     * @param {inm_clientDeleteArgs} args - Arguments to delete one Inm_client.
     * @example
     * // Delete one Inm_client
     * const Inm_client = await prisma.inm_client.delete({
     *   where: {
     *     // ... filter to delete one Inm_client
     *   }
     * })
     * 
    **/
    delete<T extends inm_clientDeleteArgs>(
      args: SelectSubset<T, inm_clientDeleteArgs>
    ): CheckSelect<T, Prisma__inm_clientClient<inm_client>, Prisma__inm_clientClient<inm_clientGetPayload<T>>>

    /**
     * Update one Inm_client.
     * @param {inm_clientUpdateArgs} args - Arguments to update one Inm_client.
     * @example
     * // Update one Inm_client
     * const inm_client = await prisma.inm_client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inm_clientUpdateArgs>(
      args: SelectSubset<T, inm_clientUpdateArgs>
    ): CheckSelect<T, Prisma__inm_clientClient<inm_client>, Prisma__inm_clientClient<inm_clientGetPayload<T>>>

    /**
     * Delete zero or more Inm_clients.
     * @param {inm_clientDeleteManyArgs} args - Arguments to filter Inm_clients to delete.
     * @example
     * // Delete a few Inm_clients
     * const { count } = await prisma.inm_client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inm_clientDeleteManyArgs>(
      args?: SelectSubset<T, inm_clientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inm_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_clientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inm_clients
     * const inm_client = await prisma.inm_client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inm_clientUpdateManyArgs>(
      args: SelectSubset<T, inm_clientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Inm_client.
     * @param {inm_clientUpsertArgs} args - Arguments to update or create a Inm_client.
     * @example
     * // Update or create a Inm_client
     * const inm_client = await prisma.inm_client.upsert({
     *   create: {
     *     // ... data to create a Inm_client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inm_client we want to update
     *   }
     * })
    **/
    upsert<T extends inm_clientUpsertArgs>(
      args: SelectSubset<T, inm_clientUpsertArgs>
    ): CheckSelect<T, Prisma__inm_clientClient<inm_client>, Prisma__inm_clientClient<inm_clientGetPayload<T>>>

    /**
     * Count the number of Inm_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_clientCountArgs} args - Arguments to filter Inm_clients to count.
     * @example
     * // Count the number of Inm_clients
     * const count = await prisma.inm_client.count({
     *   where: {
     *     // ... the filter for the Inm_clients we want to count
     *   }
     * })
    **/
    count<T extends inm_clientCountArgs>(
      args?: Subset<T, inm_clientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inm_clientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inm_client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_clientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inm_clientAggregateArgs>(args: Subset<T, Inm_clientAggregateArgs>): PrismaPromise<GetInm_clientAggregateType<T>>

    /**
     * Group by Inm_client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_clientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Inm_clientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Inm_clientGroupByArgs['orderBy'] }
        : { orderBy?: Inm_clientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Inm_clientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInm_clientGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for inm_client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__inm_clientClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends inm_userArgs = {}>(args?: Subset<T, inm_userArgs>): CheckSelect<T, Prisma__inm_userClient<inm_user | null >, Prisma__inm_userClient<inm_userGetPayload<T> | null >>;

    billing<T extends inm_billingFindManyArgs = {}>(args?: Subset<T, inm_billingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<inm_billing>>, PrismaPromise<Array<inm_billingGetPayload<T>>>>;

    estate<T extends inm_estateFindManyArgs = {}>(args?: Subset<T, inm_estateFindManyArgs>): CheckSelect<T, PrismaPromise<Array<inm_estate>>, PrismaPromise<Array<inm_estateGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * inm_client findUnique
   */
  export type inm_clientFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the inm_client
     * 
    **/
    select?: inm_clientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_clientInclude | null
    /**
     * Throw an Error if a inm_client can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_client to fetch.
     * 
    **/
    where: inm_clientWhereUniqueInput
  }


  /**
   * inm_client findFirst
   */
  export type inm_clientFindFirstArgs = {
    /**
     * Select specific fields to fetch from the inm_client
     * 
    **/
    select?: inm_clientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_clientInclude | null
    /**
     * Throw an Error if a inm_client can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_client to fetch.
     * 
    **/
    where?: inm_clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_clientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inm_clients.
     * 
    **/
    cursor?: inm_clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inm_clients.
     * 
    **/
    distinct?: Enumerable<Inm_clientScalarFieldEnum>
  }


  /**
   * inm_client findMany
   */
  export type inm_clientFindManyArgs = {
    /**
     * Select specific fields to fetch from the inm_client
     * 
    **/
    select?: inm_clientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_clientInclude | null
    /**
     * Filter, which inm_clients to fetch.
     * 
    **/
    where?: inm_clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_clientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inm_clients.
     * 
    **/
    cursor?: inm_clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_clients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Inm_clientScalarFieldEnum>
  }


  /**
   * inm_client create
   */
  export type inm_clientCreateArgs = {
    /**
     * Select specific fields to fetch from the inm_client
     * 
    **/
    select?: inm_clientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_clientInclude | null
    /**
     * The data needed to create a inm_client.
     * 
    **/
    data: XOR<inm_clientCreateInput, inm_clientUncheckedCreateInput>
  }


  /**
   * inm_client createMany
   */
  export type inm_clientCreateManyArgs = {
    data: Enumerable<inm_clientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * inm_client update
   */
  export type inm_clientUpdateArgs = {
    /**
     * Select specific fields to fetch from the inm_client
     * 
    **/
    select?: inm_clientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_clientInclude | null
    /**
     * The data needed to update a inm_client.
     * 
    **/
    data: XOR<inm_clientUpdateInput, inm_clientUncheckedUpdateInput>
    /**
     * Choose, which inm_client to update.
     * 
    **/
    where: inm_clientWhereUniqueInput
  }


  /**
   * inm_client updateMany
   */
  export type inm_clientUpdateManyArgs = {
    data: XOR<inm_clientUpdateManyMutationInput, inm_clientUncheckedUpdateManyInput>
    where?: inm_clientWhereInput
  }


  /**
   * inm_client upsert
   */
  export type inm_clientUpsertArgs = {
    /**
     * Select specific fields to fetch from the inm_client
     * 
    **/
    select?: inm_clientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_clientInclude | null
    /**
     * The filter to search for the inm_client to update in case it exists.
     * 
    **/
    where: inm_clientWhereUniqueInput
    /**
     * In case the inm_client found by the `where` argument doesn't exist, create a new inm_client with this data.
     * 
    **/
    create: XOR<inm_clientCreateInput, inm_clientUncheckedCreateInput>
    /**
     * In case the inm_client was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<inm_clientUpdateInput, inm_clientUncheckedUpdateInput>
  }


  /**
   * inm_client delete
   */
  export type inm_clientDeleteArgs = {
    /**
     * Select specific fields to fetch from the inm_client
     * 
    **/
    select?: inm_clientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_clientInclude | null
    /**
     * Filter which inm_client to delete.
     * 
    **/
    where: inm_clientWhereUniqueInput
  }


  /**
   * inm_client deleteMany
   */
  export type inm_clientDeleteManyArgs = {
    where?: inm_clientWhereInput
  }


  /**
   * inm_client without action
   */
  export type inm_clientArgs = {
    /**
     * Select specific fields to fetch from the inm_client
     * 
    **/
    select?: inm_clientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_clientInclude | null
  }



  /**
   * Model inm_billing
   */


  export type AggregateInm_billing = {
    _count: Inm_billingCountAggregateOutputType | null
    _avg: Inm_billingAvgAggregateOutputType | null
    _sum: Inm_billingSumAggregateOutputType | null
    _min: Inm_billingMinAggregateOutputType | null
    _max: Inm_billingMaxAggregateOutputType | null
  }

  export type Inm_billingAvgAggregateOutputType = {
    id: number | null
    id_client: number | null
  }

  export type Inm_billingSumAggregateOutputType = {
    id: number | null
    id_client: number | null
  }

  export type Inm_billingMinAggregateOutputType = {
    id: number | null
    id_client: number | null
  }

  export type Inm_billingMaxAggregateOutputType = {
    id: number | null
    id_client: number | null
  }

  export type Inm_billingCountAggregateOutputType = {
    id: number
    id_client: number
    _all: number
  }


  export type Inm_billingAvgAggregateInputType = {
    id?: true
    id_client?: true
  }

  export type Inm_billingSumAggregateInputType = {
    id?: true
    id_client?: true
  }

  export type Inm_billingMinAggregateInputType = {
    id?: true
    id_client?: true
  }

  export type Inm_billingMaxAggregateInputType = {
    id?: true
    id_client?: true
  }

  export type Inm_billingCountAggregateInputType = {
    id?: true
    id_client?: true
    _all?: true
  }

  export type Inm_billingAggregateArgs = {
    /**
     * Filter which inm_billing to aggregate.
     * 
    **/
    where?: inm_billingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_billings to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_billingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: inm_billingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_billings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_billings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inm_billings
    **/
    _count?: true | Inm_billingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inm_billingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inm_billingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inm_billingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inm_billingMaxAggregateInputType
  }

  export type GetInm_billingAggregateType<T extends Inm_billingAggregateArgs> = {
        [P in keyof T & keyof AggregateInm_billing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInm_billing[P]>
      : GetScalarType<T[P], AggregateInm_billing[P]>
  }


    
    
  export type Inm_billingGroupByArgs = {
    where?: inm_billingWhereInput
    orderBy?: Enumerable<inm_billingOrderByWithAggregationInput>
    by: Array<Inm_billingScalarFieldEnum>
    having?: inm_billingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inm_billingCountAggregateInputType | true
    _avg?: Inm_billingAvgAggregateInputType
    _sum?: Inm_billingSumAggregateInputType
    _min?: Inm_billingMinAggregateInputType
    _max?: Inm_billingMaxAggregateInputType
  }


  export type Inm_billingGroupByOutputType = {
    id: number
    id_client: number
    _count: Inm_billingCountAggregateOutputType | null
    _avg: Inm_billingAvgAggregateOutputType | null
    _sum: Inm_billingSumAggregateOutputType | null
    _min: Inm_billingMinAggregateOutputType | null
    _max: Inm_billingMaxAggregateOutputType | null
  }

  type GetInm_billingGroupByPayload<T extends Inm_billingGroupByArgs> = Promise<
    Array<
      PickArray<Inm_billingGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Inm_billingGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Inm_billingGroupByOutputType[P]> 
            : GetScalarType<T[P], Inm_billingGroupByOutputType[P]>
        }
      > 
    >


  export type inm_billingSelect = {
    id?: boolean
    id_client?: boolean
    client?: boolean | inm_clientArgs
  }

  export type inm_billingInclude = {
    client?: boolean | inm_clientArgs
  }

  export type inm_billingGetPayload<
    S extends boolean | null | undefined | inm_billingArgs,
    U = keyof S
      > = S extends true
        ? inm_billing
    : S extends undefined
    ? never
    : S extends inm_billingArgs | inm_billingFindManyArgs
    ?'include' extends U
    ? inm_billing  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'client'
        ? inm_clientGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof inm_billing ?inm_billing [P]
  : 
          P extends 'client'
        ? inm_clientGetPayload<S['select'][P]> : never
  } 
    : inm_billing
  : inm_billing


  type inm_billingCountArgs = Merge<
    Omit<inm_billingFindManyArgs, 'select' | 'include'> & {
      select?: Inm_billingCountAggregateInputType | true
    }
  >

  export interface inm_billingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Inm_billing that matches the filter.
     * @param {inm_billingFindUniqueArgs} args - Arguments to find a Inm_billing
     * @example
     * // Get one Inm_billing
     * const inm_billing = await prisma.inm_billing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inm_billingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, inm_billingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'inm_billing'> extends True ? CheckSelect<T, Prisma__inm_billingClient<inm_billing>, Prisma__inm_billingClient<inm_billingGetPayload<T>>> : CheckSelect<T, Prisma__inm_billingClient<inm_billing | null >, Prisma__inm_billingClient<inm_billingGetPayload<T> | null >>

    /**
     * Find the first Inm_billing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_billingFindFirstArgs} args - Arguments to find a Inm_billing
     * @example
     * // Get one Inm_billing
     * const inm_billing = await prisma.inm_billing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inm_billingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, inm_billingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'inm_billing'> extends True ? CheckSelect<T, Prisma__inm_billingClient<inm_billing>, Prisma__inm_billingClient<inm_billingGetPayload<T>>> : CheckSelect<T, Prisma__inm_billingClient<inm_billing | null >, Prisma__inm_billingClient<inm_billingGetPayload<T> | null >>

    /**
     * Find zero or more Inm_billings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_billingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inm_billings
     * const inm_billings = await prisma.inm_billing.findMany()
     * 
     * // Get first 10 Inm_billings
     * const inm_billings = await prisma.inm_billing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inm_billingWithIdOnly = await prisma.inm_billing.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends inm_billingFindManyArgs>(
      args?: SelectSubset<T, inm_billingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<inm_billing>>, PrismaPromise<Array<inm_billingGetPayload<T>>>>

    /**
     * Create a Inm_billing.
     * @param {inm_billingCreateArgs} args - Arguments to create a Inm_billing.
     * @example
     * // Create one Inm_billing
     * const Inm_billing = await prisma.inm_billing.create({
     *   data: {
     *     // ... data to create a Inm_billing
     *   }
     * })
     * 
    **/
    create<T extends inm_billingCreateArgs>(
      args: SelectSubset<T, inm_billingCreateArgs>
    ): CheckSelect<T, Prisma__inm_billingClient<inm_billing>, Prisma__inm_billingClient<inm_billingGetPayload<T>>>

    /**
     * Create many Inm_billings.
     *     @param {inm_billingCreateManyArgs} args - Arguments to create many Inm_billings.
     *     @example
     *     // Create many Inm_billings
     *     const inm_billing = await prisma.inm_billing.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends inm_billingCreateManyArgs>(
      args?: SelectSubset<T, inm_billingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Inm_billing.
     * @param {inm_billingDeleteArgs} args - Arguments to delete one Inm_billing.
     * @example
     * // Delete one Inm_billing
     * const Inm_billing = await prisma.inm_billing.delete({
     *   where: {
     *     // ... filter to delete one Inm_billing
     *   }
     * })
     * 
    **/
    delete<T extends inm_billingDeleteArgs>(
      args: SelectSubset<T, inm_billingDeleteArgs>
    ): CheckSelect<T, Prisma__inm_billingClient<inm_billing>, Prisma__inm_billingClient<inm_billingGetPayload<T>>>

    /**
     * Update one Inm_billing.
     * @param {inm_billingUpdateArgs} args - Arguments to update one Inm_billing.
     * @example
     * // Update one Inm_billing
     * const inm_billing = await prisma.inm_billing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inm_billingUpdateArgs>(
      args: SelectSubset<T, inm_billingUpdateArgs>
    ): CheckSelect<T, Prisma__inm_billingClient<inm_billing>, Prisma__inm_billingClient<inm_billingGetPayload<T>>>

    /**
     * Delete zero or more Inm_billings.
     * @param {inm_billingDeleteManyArgs} args - Arguments to filter Inm_billings to delete.
     * @example
     * // Delete a few Inm_billings
     * const { count } = await prisma.inm_billing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inm_billingDeleteManyArgs>(
      args?: SelectSubset<T, inm_billingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inm_billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_billingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inm_billings
     * const inm_billing = await prisma.inm_billing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inm_billingUpdateManyArgs>(
      args: SelectSubset<T, inm_billingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Inm_billing.
     * @param {inm_billingUpsertArgs} args - Arguments to update or create a Inm_billing.
     * @example
     * // Update or create a Inm_billing
     * const inm_billing = await prisma.inm_billing.upsert({
     *   create: {
     *     // ... data to create a Inm_billing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inm_billing we want to update
     *   }
     * })
    **/
    upsert<T extends inm_billingUpsertArgs>(
      args: SelectSubset<T, inm_billingUpsertArgs>
    ): CheckSelect<T, Prisma__inm_billingClient<inm_billing>, Prisma__inm_billingClient<inm_billingGetPayload<T>>>

    /**
     * Count the number of Inm_billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_billingCountArgs} args - Arguments to filter Inm_billings to count.
     * @example
     * // Count the number of Inm_billings
     * const count = await prisma.inm_billing.count({
     *   where: {
     *     // ... the filter for the Inm_billings we want to count
     *   }
     * })
    **/
    count<T extends inm_billingCountArgs>(
      args?: Subset<T, inm_billingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inm_billingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inm_billing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_billingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inm_billingAggregateArgs>(args: Subset<T, Inm_billingAggregateArgs>): PrismaPromise<GetInm_billingAggregateType<T>>

    /**
     * Group by Inm_billing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_billingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Inm_billingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Inm_billingGroupByArgs['orderBy'] }
        : { orderBy?: Inm_billingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Inm_billingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInm_billingGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for inm_billing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__inm_billingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    client<T extends inm_clientArgs = {}>(args?: Subset<T, inm_clientArgs>): CheckSelect<T, Prisma__inm_clientClient<inm_client | null >, Prisma__inm_clientClient<inm_clientGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * inm_billing findUnique
   */
  export type inm_billingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the inm_billing
     * 
    **/
    select?: inm_billingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_billingInclude | null
    /**
     * Throw an Error if a inm_billing can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_billing to fetch.
     * 
    **/
    where: inm_billingWhereUniqueInput
  }


  /**
   * inm_billing findFirst
   */
  export type inm_billingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the inm_billing
     * 
    **/
    select?: inm_billingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_billingInclude | null
    /**
     * Throw an Error if a inm_billing can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_billing to fetch.
     * 
    **/
    where?: inm_billingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_billings to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_billingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inm_billings.
     * 
    **/
    cursor?: inm_billingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_billings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_billings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inm_billings.
     * 
    **/
    distinct?: Enumerable<Inm_billingScalarFieldEnum>
  }


  /**
   * inm_billing findMany
   */
  export type inm_billingFindManyArgs = {
    /**
     * Select specific fields to fetch from the inm_billing
     * 
    **/
    select?: inm_billingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_billingInclude | null
    /**
     * Filter, which inm_billings to fetch.
     * 
    **/
    where?: inm_billingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_billings to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_billingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inm_billings.
     * 
    **/
    cursor?: inm_billingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_billings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_billings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Inm_billingScalarFieldEnum>
  }


  /**
   * inm_billing create
   */
  export type inm_billingCreateArgs = {
    /**
     * Select specific fields to fetch from the inm_billing
     * 
    **/
    select?: inm_billingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_billingInclude | null
    /**
     * The data needed to create a inm_billing.
     * 
    **/
    data: XOR<inm_billingCreateInput, inm_billingUncheckedCreateInput>
  }


  /**
   * inm_billing createMany
   */
  export type inm_billingCreateManyArgs = {
    data: Enumerable<inm_billingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * inm_billing update
   */
  export type inm_billingUpdateArgs = {
    /**
     * Select specific fields to fetch from the inm_billing
     * 
    **/
    select?: inm_billingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_billingInclude | null
    /**
     * The data needed to update a inm_billing.
     * 
    **/
    data: XOR<inm_billingUpdateInput, inm_billingUncheckedUpdateInput>
    /**
     * Choose, which inm_billing to update.
     * 
    **/
    where: inm_billingWhereUniqueInput
  }


  /**
   * inm_billing updateMany
   */
  export type inm_billingUpdateManyArgs = {
    data: XOR<inm_billingUpdateManyMutationInput, inm_billingUncheckedUpdateManyInput>
    where?: inm_billingWhereInput
  }


  /**
   * inm_billing upsert
   */
  export type inm_billingUpsertArgs = {
    /**
     * Select specific fields to fetch from the inm_billing
     * 
    **/
    select?: inm_billingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_billingInclude | null
    /**
     * The filter to search for the inm_billing to update in case it exists.
     * 
    **/
    where: inm_billingWhereUniqueInput
    /**
     * In case the inm_billing found by the `where` argument doesn't exist, create a new inm_billing with this data.
     * 
    **/
    create: XOR<inm_billingCreateInput, inm_billingUncheckedCreateInput>
    /**
     * In case the inm_billing was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<inm_billingUpdateInput, inm_billingUncheckedUpdateInput>
  }


  /**
   * inm_billing delete
   */
  export type inm_billingDeleteArgs = {
    /**
     * Select specific fields to fetch from the inm_billing
     * 
    **/
    select?: inm_billingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_billingInclude | null
    /**
     * Filter which inm_billing to delete.
     * 
    **/
    where: inm_billingWhereUniqueInput
  }


  /**
   * inm_billing deleteMany
   */
  export type inm_billingDeleteManyArgs = {
    where?: inm_billingWhereInput
  }


  /**
   * inm_billing without action
   */
  export type inm_billingArgs = {
    /**
     * Select specific fields to fetch from the inm_billing
     * 
    **/
    select?: inm_billingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_billingInclude | null
  }



  /**
   * Model inm_estate
   */


  export type AggregateInm_estate = {
    _count: Inm_estateCountAggregateOutputType | null
    _avg: Inm_estateAvgAggregateOutputType | null
    _sum: Inm_estateSumAggregateOutputType | null
    _min: Inm_estateMinAggregateOutputType | null
    _max: Inm_estateMaxAggregateOutputType | null
  }

  export type Inm_estateAvgAggregateOutputType = {
    id: number | null
    price: number | null
    id_owner: number | null
    id_client: number | null
  }

  export type Inm_estateSumAggregateOutputType = {
    id: number | null
    price: number | null
    id_owner: number | null
    id_client: number | null
  }

  export type Inm_estateMinAggregateOutputType = {
    id: number | null
    address: string | null
    type: estate_type | null
    price: number | null
    id_owner: number | null
    id_client: number | null
  }

  export type Inm_estateMaxAggregateOutputType = {
    id: number | null
    address: string | null
    type: estate_type | null
    price: number | null
    id_owner: number | null
    id_client: number | null
  }

  export type Inm_estateCountAggregateOutputType = {
    id: number
    address: number
    type: number
    price: number
    id_owner: number
    id_client: number
    _all: number
  }


  export type Inm_estateAvgAggregateInputType = {
    id?: true
    price?: true
    id_owner?: true
    id_client?: true
  }

  export type Inm_estateSumAggregateInputType = {
    id?: true
    price?: true
    id_owner?: true
    id_client?: true
  }

  export type Inm_estateMinAggregateInputType = {
    id?: true
    address?: true
    type?: true
    price?: true
    id_owner?: true
    id_client?: true
  }

  export type Inm_estateMaxAggregateInputType = {
    id?: true
    address?: true
    type?: true
    price?: true
    id_owner?: true
    id_client?: true
  }

  export type Inm_estateCountAggregateInputType = {
    id?: true
    address?: true
    type?: true
    price?: true
    id_owner?: true
    id_client?: true
    _all?: true
  }

  export type Inm_estateAggregateArgs = {
    /**
     * Filter which inm_estate to aggregate.
     * 
    **/
    where?: inm_estateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_estates to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_estateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: inm_estateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_estates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_estates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inm_estates
    **/
    _count?: true | Inm_estateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inm_estateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inm_estateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inm_estateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inm_estateMaxAggregateInputType
  }

  export type GetInm_estateAggregateType<T extends Inm_estateAggregateArgs> = {
        [P in keyof T & keyof AggregateInm_estate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInm_estate[P]>
      : GetScalarType<T[P], AggregateInm_estate[P]>
  }


    
    
  export type Inm_estateGroupByArgs = {
    where?: inm_estateWhereInput
    orderBy?: Enumerable<inm_estateOrderByWithAggregationInput>
    by: Array<Inm_estateScalarFieldEnum>
    having?: inm_estateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inm_estateCountAggregateInputType | true
    _avg?: Inm_estateAvgAggregateInputType
    _sum?: Inm_estateSumAggregateInputType
    _min?: Inm_estateMinAggregateInputType
    _max?: Inm_estateMaxAggregateInputType
  }


  export type Inm_estateGroupByOutputType = {
    id: number
    address: string
    type: estate_type
    price: number
    id_owner: number
    id_client: number
    _count: Inm_estateCountAggregateOutputType | null
    _avg: Inm_estateAvgAggregateOutputType | null
    _sum: Inm_estateSumAggregateOutputType | null
    _min: Inm_estateMinAggregateOutputType | null
    _max: Inm_estateMaxAggregateOutputType | null
  }

  type GetInm_estateGroupByPayload<T extends Inm_estateGroupByArgs> = Promise<
    Array<
      PickArray<Inm_estateGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Inm_estateGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Inm_estateGroupByOutputType[P]> 
            : GetScalarType<T[P], Inm_estateGroupByOutputType[P]>
        }
      > 
    >


  export type inm_estateSelect = {
    id?: boolean
    address?: boolean
    type?: boolean
    price?: boolean
    id_owner?: boolean
    owner?: boolean | inm_ownerArgs
    id_client?: boolean
    client?: boolean | inm_clientArgs
  }

  export type inm_estateInclude = {
    owner?: boolean | inm_ownerArgs
    client?: boolean | inm_clientArgs
  }

  export type inm_estateGetPayload<
    S extends boolean | null | undefined | inm_estateArgs,
    U = keyof S
      > = S extends true
        ? inm_estate
    : S extends undefined
    ? never
    : S extends inm_estateArgs | inm_estateFindManyArgs
    ?'include' extends U
    ? inm_estate  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'owner'
        ? inm_ownerGetPayload<S['include'][P]> :
        P extends 'client'
        ? inm_clientGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof inm_estate ?inm_estate [P]
  : 
          P extends 'owner'
        ? inm_ownerGetPayload<S['select'][P]> :
        P extends 'client'
        ? inm_clientGetPayload<S['select'][P]> : never
  } 
    : inm_estate
  : inm_estate


  type inm_estateCountArgs = Merge<
    Omit<inm_estateFindManyArgs, 'select' | 'include'> & {
      select?: Inm_estateCountAggregateInputType | true
    }
  >

  export interface inm_estateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Inm_estate that matches the filter.
     * @param {inm_estateFindUniqueArgs} args - Arguments to find a Inm_estate
     * @example
     * // Get one Inm_estate
     * const inm_estate = await prisma.inm_estate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inm_estateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, inm_estateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'inm_estate'> extends True ? CheckSelect<T, Prisma__inm_estateClient<inm_estate>, Prisma__inm_estateClient<inm_estateGetPayload<T>>> : CheckSelect<T, Prisma__inm_estateClient<inm_estate | null >, Prisma__inm_estateClient<inm_estateGetPayload<T> | null >>

    /**
     * Find the first Inm_estate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_estateFindFirstArgs} args - Arguments to find a Inm_estate
     * @example
     * // Get one Inm_estate
     * const inm_estate = await prisma.inm_estate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inm_estateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, inm_estateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'inm_estate'> extends True ? CheckSelect<T, Prisma__inm_estateClient<inm_estate>, Prisma__inm_estateClient<inm_estateGetPayload<T>>> : CheckSelect<T, Prisma__inm_estateClient<inm_estate | null >, Prisma__inm_estateClient<inm_estateGetPayload<T> | null >>

    /**
     * Find zero or more Inm_estates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_estateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inm_estates
     * const inm_estates = await prisma.inm_estate.findMany()
     * 
     * // Get first 10 Inm_estates
     * const inm_estates = await prisma.inm_estate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inm_estateWithIdOnly = await prisma.inm_estate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends inm_estateFindManyArgs>(
      args?: SelectSubset<T, inm_estateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<inm_estate>>, PrismaPromise<Array<inm_estateGetPayload<T>>>>

    /**
     * Create a Inm_estate.
     * @param {inm_estateCreateArgs} args - Arguments to create a Inm_estate.
     * @example
     * // Create one Inm_estate
     * const Inm_estate = await prisma.inm_estate.create({
     *   data: {
     *     // ... data to create a Inm_estate
     *   }
     * })
     * 
    **/
    create<T extends inm_estateCreateArgs>(
      args: SelectSubset<T, inm_estateCreateArgs>
    ): CheckSelect<T, Prisma__inm_estateClient<inm_estate>, Prisma__inm_estateClient<inm_estateGetPayload<T>>>

    /**
     * Create many Inm_estates.
     *     @param {inm_estateCreateManyArgs} args - Arguments to create many Inm_estates.
     *     @example
     *     // Create many Inm_estates
     *     const inm_estate = await prisma.inm_estate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends inm_estateCreateManyArgs>(
      args?: SelectSubset<T, inm_estateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Inm_estate.
     * @param {inm_estateDeleteArgs} args - Arguments to delete one Inm_estate.
     * @example
     * // Delete one Inm_estate
     * const Inm_estate = await prisma.inm_estate.delete({
     *   where: {
     *     // ... filter to delete one Inm_estate
     *   }
     * })
     * 
    **/
    delete<T extends inm_estateDeleteArgs>(
      args: SelectSubset<T, inm_estateDeleteArgs>
    ): CheckSelect<T, Prisma__inm_estateClient<inm_estate>, Prisma__inm_estateClient<inm_estateGetPayload<T>>>

    /**
     * Update one Inm_estate.
     * @param {inm_estateUpdateArgs} args - Arguments to update one Inm_estate.
     * @example
     * // Update one Inm_estate
     * const inm_estate = await prisma.inm_estate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inm_estateUpdateArgs>(
      args: SelectSubset<T, inm_estateUpdateArgs>
    ): CheckSelect<T, Prisma__inm_estateClient<inm_estate>, Prisma__inm_estateClient<inm_estateGetPayload<T>>>

    /**
     * Delete zero or more Inm_estates.
     * @param {inm_estateDeleteManyArgs} args - Arguments to filter Inm_estates to delete.
     * @example
     * // Delete a few Inm_estates
     * const { count } = await prisma.inm_estate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inm_estateDeleteManyArgs>(
      args?: SelectSubset<T, inm_estateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inm_estates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_estateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inm_estates
     * const inm_estate = await prisma.inm_estate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inm_estateUpdateManyArgs>(
      args: SelectSubset<T, inm_estateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Inm_estate.
     * @param {inm_estateUpsertArgs} args - Arguments to update or create a Inm_estate.
     * @example
     * // Update or create a Inm_estate
     * const inm_estate = await prisma.inm_estate.upsert({
     *   create: {
     *     // ... data to create a Inm_estate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inm_estate we want to update
     *   }
     * })
    **/
    upsert<T extends inm_estateUpsertArgs>(
      args: SelectSubset<T, inm_estateUpsertArgs>
    ): CheckSelect<T, Prisma__inm_estateClient<inm_estate>, Prisma__inm_estateClient<inm_estateGetPayload<T>>>

    /**
     * Count the number of Inm_estates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inm_estateCountArgs} args - Arguments to filter Inm_estates to count.
     * @example
     * // Count the number of Inm_estates
     * const count = await prisma.inm_estate.count({
     *   where: {
     *     // ... the filter for the Inm_estates we want to count
     *   }
     * })
    **/
    count<T extends inm_estateCountArgs>(
      args?: Subset<T, inm_estateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inm_estateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inm_estate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_estateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inm_estateAggregateArgs>(args: Subset<T, Inm_estateAggregateArgs>): PrismaPromise<GetInm_estateAggregateType<T>>

    /**
     * Group by Inm_estate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inm_estateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Inm_estateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Inm_estateGroupByArgs['orderBy'] }
        : { orderBy?: Inm_estateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Inm_estateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInm_estateGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for inm_estate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__inm_estateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends inm_ownerArgs = {}>(args?: Subset<T, inm_ownerArgs>): CheckSelect<T, Prisma__inm_ownerClient<inm_owner | null >, Prisma__inm_ownerClient<inm_ownerGetPayload<T> | null >>;

    client<T extends inm_clientArgs = {}>(args?: Subset<T, inm_clientArgs>): CheckSelect<T, Prisma__inm_clientClient<inm_client | null >, Prisma__inm_clientClient<inm_clientGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * inm_estate findUnique
   */
  export type inm_estateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the inm_estate
     * 
    **/
    select?: inm_estateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_estateInclude | null
    /**
     * Throw an Error if a inm_estate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_estate to fetch.
     * 
    **/
    where: inm_estateWhereUniqueInput
  }


  /**
   * inm_estate findFirst
   */
  export type inm_estateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the inm_estate
     * 
    **/
    select?: inm_estateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_estateInclude | null
    /**
     * Throw an Error if a inm_estate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which inm_estate to fetch.
     * 
    **/
    where?: inm_estateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_estates to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_estateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inm_estates.
     * 
    **/
    cursor?: inm_estateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_estates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_estates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inm_estates.
     * 
    **/
    distinct?: Enumerable<Inm_estateScalarFieldEnum>
  }


  /**
   * inm_estate findMany
   */
  export type inm_estateFindManyArgs = {
    /**
     * Select specific fields to fetch from the inm_estate
     * 
    **/
    select?: inm_estateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_estateInclude | null
    /**
     * Filter, which inm_estates to fetch.
     * 
    **/
    where?: inm_estateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inm_estates to fetch.
     * 
    **/
    orderBy?: Enumerable<inm_estateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inm_estates.
     * 
    **/
    cursor?: inm_estateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inm_estates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inm_estates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Inm_estateScalarFieldEnum>
  }


  /**
   * inm_estate create
   */
  export type inm_estateCreateArgs = {
    /**
     * Select specific fields to fetch from the inm_estate
     * 
    **/
    select?: inm_estateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_estateInclude | null
    /**
     * The data needed to create a inm_estate.
     * 
    **/
    data: XOR<inm_estateCreateInput, inm_estateUncheckedCreateInput>
  }


  /**
   * inm_estate createMany
   */
  export type inm_estateCreateManyArgs = {
    data: Enumerable<inm_estateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * inm_estate update
   */
  export type inm_estateUpdateArgs = {
    /**
     * Select specific fields to fetch from the inm_estate
     * 
    **/
    select?: inm_estateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_estateInclude | null
    /**
     * The data needed to update a inm_estate.
     * 
    **/
    data: XOR<inm_estateUpdateInput, inm_estateUncheckedUpdateInput>
    /**
     * Choose, which inm_estate to update.
     * 
    **/
    where: inm_estateWhereUniqueInput
  }


  /**
   * inm_estate updateMany
   */
  export type inm_estateUpdateManyArgs = {
    data: XOR<inm_estateUpdateManyMutationInput, inm_estateUncheckedUpdateManyInput>
    where?: inm_estateWhereInput
  }


  /**
   * inm_estate upsert
   */
  export type inm_estateUpsertArgs = {
    /**
     * Select specific fields to fetch from the inm_estate
     * 
    **/
    select?: inm_estateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_estateInclude | null
    /**
     * The filter to search for the inm_estate to update in case it exists.
     * 
    **/
    where: inm_estateWhereUniqueInput
    /**
     * In case the inm_estate found by the `where` argument doesn't exist, create a new inm_estate with this data.
     * 
    **/
    create: XOR<inm_estateCreateInput, inm_estateUncheckedCreateInput>
    /**
     * In case the inm_estate was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<inm_estateUpdateInput, inm_estateUncheckedUpdateInput>
  }


  /**
   * inm_estate delete
   */
  export type inm_estateDeleteArgs = {
    /**
     * Select specific fields to fetch from the inm_estate
     * 
    **/
    select?: inm_estateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_estateInclude | null
    /**
     * Filter which inm_estate to delete.
     * 
    **/
    where: inm_estateWhereUniqueInput
  }


  /**
   * inm_estate deleteMany
   */
  export type inm_estateDeleteManyArgs = {
    where?: inm_estateWhereInput
  }


  /**
   * inm_estate without action
   */
  export type inm_estateArgs = {
    /**
     * Select specific fields to fetch from the inm_estate
     * 
    **/
    select?: inm_estateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: inm_estateInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Inm_real_estateScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type Inm_real_estateScalarFieldEnum = (typeof Inm_real_estateScalarFieldEnum)[keyof typeof Inm_real_estateScalarFieldEnum]


  export const Inm_userScalarFieldEnum: {
    id: 'id',
    email: 'email',
    first_name: 'first_name',
    last_name: 'last_name'
  };

  export type Inm_userScalarFieldEnum = (typeof Inm_userScalarFieldEnum)[keyof typeof Inm_userScalarFieldEnum]


  export const Inm_ownerScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user'
  };

  export type Inm_ownerScalarFieldEnum = (typeof Inm_ownerScalarFieldEnum)[keyof typeof Inm_ownerScalarFieldEnum]


  export const Inm_clientScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user'
  };

  export type Inm_clientScalarFieldEnum = (typeof Inm_clientScalarFieldEnum)[keyof typeof Inm_clientScalarFieldEnum]


  export const Inm_billingScalarFieldEnum: {
    id: 'id',
    id_client: 'id_client'
  };

  export type Inm_billingScalarFieldEnum = (typeof Inm_billingScalarFieldEnum)[keyof typeof Inm_billingScalarFieldEnum]


  export const Inm_estateScalarFieldEnum: {
    id: 'id',
    address: 'address',
    type: 'type',
    price: 'price',
    id_owner: 'id_owner',
    id_client: 'id_client'
  };

  export type Inm_estateScalarFieldEnum = (typeof Inm_estateScalarFieldEnum)[keyof typeof Inm_estateScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type inm_real_estateWhereInput = {
    AND?: Enumerable<inm_real_estateWhereInput>
    OR?: Enumerable<inm_real_estateWhereInput>
    NOT?: Enumerable<inm_real_estateWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
  }

  export type inm_real_estateOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type inm_real_estateWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type inm_real_estateOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: inm_real_estateCountOrderByAggregateInput
    _avg?: inm_real_estateAvgOrderByAggregateInput
    _max?: inm_real_estateMaxOrderByAggregateInput
    _min?: inm_real_estateMinOrderByAggregateInput
    _sum?: inm_real_estateSumOrderByAggregateInput
  }

  export type inm_real_estateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<inm_real_estateScalarWhereWithAggregatesInput>
    OR?: Enumerable<inm_real_estateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<inm_real_estateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type inm_userWhereInput = {
    AND?: Enumerable<inm_userWhereInput>
    OR?: Enumerable<inm_userWhereInput>
    NOT?: Enumerable<inm_userWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    owner?: Inm_ownerListRelationFilter
    client?: Inm_clientListRelationFilter
  }

  export type inm_userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    owner?: inm_ownerOrderByRelationAggregateInput
    client?: inm_clientOrderByRelationAggregateInput
  }

  export type inm_userWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type inm_userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    _count?: inm_userCountOrderByAggregateInput
    _avg?: inm_userAvgOrderByAggregateInput
    _max?: inm_userMaxOrderByAggregateInput
    _min?: inm_userMinOrderByAggregateInput
    _sum?: inm_userSumOrderByAggregateInput
  }

  export type inm_userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<inm_userScalarWhereWithAggregatesInput>
    OR?: Enumerable<inm_userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<inm_userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
  }

  export type inm_ownerWhereInput = {
    AND?: Enumerable<inm_ownerWhereInput>
    OR?: Enumerable<inm_ownerWhereInput>
    NOT?: Enumerable<inm_ownerWhereInput>
    id?: IntFilter | number
    id_user?: IntFilter | number
    user?: XOR<Inm_userRelationFilter, inm_userWhereInput>
    estates?: Inm_estateListRelationFilter
  }

  export type inm_ownerOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    user?: inm_userOrderByWithRelationInput
    estates?: inm_estateOrderByRelationAggregateInput
  }

  export type inm_ownerWhereUniqueInput = {
    id?: number
    id_user?: number
  }

  export type inm_ownerOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    _count?: inm_ownerCountOrderByAggregateInput
    _avg?: inm_ownerAvgOrderByAggregateInput
    _max?: inm_ownerMaxOrderByAggregateInput
    _min?: inm_ownerMinOrderByAggregateInput
    _sum?: inm_ownerSumOrderByAggregateInput
  }

  export type inm_ownerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<inm_ownerScalarWhereWithAggregatesInput>
    OR?: Enumerable<inm_ownerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<inm_ownerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_user?: IntWithAggregatesFilter | number
  }

  export type inm_clientWhereInput = {
    AND?: Enumerable<inm_clientWhereInput>
    OR?: Enumerable<inm_clientWhereInput>
    NOT?: Enumerable<inm_clientWhereInput>
    id?: IntFilter | number
    id_user?: IntFilter | number
    user?: XOR<Inm_userRelationFilter, inm_userWhereInput>
    billing?: Inm_billingListRelationFilter
    estate?: Inm_estateListRelationFilter
  }

  export type inm_clientOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    user?: inm_userOrderByWithRelationInput
    billing?: inm_billingOrderByRelationAggregateInput
    estate?: inm_estateOrderByRelationAggregateInput
  }

  export type inm_clientWhereUniqueInput = {
    id?: number
    id_user?: number
  }

  export type inm_clientOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    _count?: inm_clientCountOrderByAggregateInput
    _avg?: inm_clientAvgOrderByAggregateInput
    _max?: inm_clientMaxOrderByAggregateInput
    _min?: inm_clientMinOrderByAggregateInput
    _sum?: inm_clientSumOrderByAggregateInput
  }

  export type inm_clientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<inm_clientScalarWhereWithAggregatesInput>
    OR?: Enumerable<inm_clientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<inm_clientScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_user?: IntWithAggregatesFilter | number
  }

  export type inm_billingWhereInput = {
    AND?: Enumerable<inm_billingWhereInput>
    OR?: Enumerable<inm_billingWhereInput>
    NOT?: Enumerable<inm_billingWhereInput>
    id?: IntFilter | number
    id_client?: IntFilter | number
    client?: XOR<Inm_clientRelationFilter, inm_clientWhereInput>
  }

  export type inm_billingOrderByWithRelationInput = {
    id?: SortOrder
    id_client?: SortOrder
    client?: inm_clientOrderByWithRelationInput
  }

  export type inm_billingWhereUniqueInput = {
    id?: number
    id_client?: number
  }

  export type inm_billingOrderByWithAggregationInput = {
    id?: SortOrder
    id_client?: SortOrder
    _count?: inm_billingCountOrderByAggregateInput
    _avg?: inm_billingAvgOrderByAggregateInput
    _max?: inm_billingMaxOrderByAggregateInput
    _min?: inm_billingMinOrderByAggregateInput
    _sum?: inm_billingSumOrderByAggregateInput
  }

  export type inm_billingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<inm_billingScalarWhereWithAggregatesInput>
    OR?: Enumerable<inm_billingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<inm_billingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_client?: IntWithAggregatesFilter | number
  }

  export type inm_estateWhereInput = {
    AND?: Enumerable<inm_estateWhereInput>
    OR?: Enumerable<inm_estateWhereInput>
    NOT?: Enumerable<inm_estateWhereInput>
    id?: IntFilter | number
    address?: StringFilter | string
    type?: Enumestate_typeFilter | estate_type
    price?: IntFilter | number
    id_owner?: IntFilter | number
    owner?: XOR<Inm_ownerRelationFilter, inm_ownerWhereInput>
    id_client?: IntFilter | number
    client?: XOR<Inm_clientRelationFilter, inm_clientWhereInput>
  }

  export type inm_estateOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    type?: SortOrder
    price?: SortOrder
    id_owner?: SortOrder
    owner?: inm_ownerOrderByWithRelationInput
    id_client?: SortOrder
    client?: inm_clientOrderByWithRelationInput
  }

  export type inm_estateWhereUniqueInput = {
    id?: number
  }

  export type inm_estateOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    type?: SortOrder
    price?: SortOrder
    id_owner?: SortOrder
    id_client?: SortOrder
    _count?: inm_estateCountOrderByAggregateInput
    _avg?: inm_estateAvgOrderByAggregateInput
    _max?: inm_estateMaxOrderByAggregateInput
    _min?: inm_estateMinOrderByAggregateInput
    _sum?: inm_estateSumOrderByAggregateInput
  }

  export type inm_estateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<inm_estateScalarWhereWithAggregatesInput>
    OR?: Enumerable<inm_estateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<inm_estateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    address?: StringWithAggregatesFilter | string
    type?: Enumestate_typeWithAggregatesFilter | estate_type
    price?: IntWithAggregatesFilter | number
    id_owner?: IntWithAggregatesFilter | number
    id_client?: IntWithAggregatesFilter | number
  }

  export type inm_real_estateCreateInput = {
    email: string
    password: string
  }

  export type inm_real_estateUncheckedCreateInput = {
    id?: number
    email: string
    password: string
  }

  export type inm_real_estateUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type inm_real_estateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type inm_real_estateCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type inm_real_estateUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type inm_real_estateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type inm_userCreateInput = {
    email: string
    first_name: string
    last_name: string
    owner?: inm_ownerCreateNestedManyWithoutUserInput
    client?: inm_clientCreateNestedManyWithoutUserInput
  }

  export type inm_userUncheckedCreateInput = {
    id?: number
    email: string
    first_name: string
    last_name: string
    owner?: inm_ownerUncheckedCreateNestedManyWithoutUserInput
    client?: inm_clientUncheckedCreateNestedManyWithoutUserInput
  }

  export type inm_userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    owner?: inm_ownerUpdateManyWithoutUserInput
    client?: inm_clientUpdateManyWithoutUserInput
  }

  export type inm_userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    owner?: inm_ownerUncheckedUpdateManyWithoutUserInput
    client?: inm_clientUncheckedUpdateManyWithoutUserInput
  }

  export type inm_userCreateManyInput = {
    id?: number
    email: string
    first_name: string
    last_name: string
  }

  export type inm_userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
  }

  export type inm_userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
  }

  export type inm_ownerCreateInput = {
    user: inm_userCreateNestedOneWithoutOwnerInput
    estates?: inm_estateCreateNestedManyWithoutOwnerInput
  }

  export type inm_ownerUncheckedCreateInput = {
    id?: number
    id_user: number
    estates?: inm_estateUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type inm_ownerUpdateInput = {
    user?: inm_userUpdateOneRequiredWithoutOwnerInput
    estates?: inm_estateUpdateManyWithoutOwnerInput
  }

  export type inm_ownerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    estates?: inm_estateUncheckedUpdateManyWithoutOwnerInput
  }

  export type inm_ownerCreateManyInput = {
    id?: number
    id_user: number
  }

  export type inm_ownerUpdateManyMutationInput = {

  }

  export type inm_ownerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
  }

  export type inm_clientCreateInput = {
    user: inm_userCreateNestedOneWithoutClientInput
    billing?: inm_billingCreateNestedManyWithoutClientInput
    estate?: inm_estateCreateNestedManyWithoutClientInput
  }

  export type inm_clientUncheckedCreateInput = {
    id?: number
    id_user: number
    billing?: inm_billingUncheckedCreateNestedManyWithoutClientInput
    estate?: inm_estateUncheckedCreateNestedManyWithoutClientInput
  }

  export type inm_clientUpdateInput = {
    user?: inm_userUpdateOneRequiredWithoutClientInput
    billing?: inm_billingUpdateManyWithoutClientInput
    estate?: inm_estateUpdateManyWithoutClientInput
  }

  export type inm_clientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    billing?: inm_billingUncheckedUpdateManyWithoutClientInput
    estate?: inm_estateUncheckedUpdateManyWithoutClientInput
  }

  export type inm_clientCreateManyInput = {
    id?: number
    id_user: number
  }

  export type inm_clientUpdateManyMutationInput = {

  }

  export type inm_clientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
  }

  export type inm_billingCreateInput = {
    client: inm_clientCreateNestedOneWithoutBillingInput
  }

  export type inm_billingUncheckedCreateInput = {
    id?: number
    id_client: number
  }

  export type inm_billingUpdateInput = {
    client?: inm_clientUpdateOneRequiredWithoutBillingInput
  }

  export type inm_billingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_client?: IntFieldUpdateOperationsInput | number
  }

  export type inm_billingCreateManyInput = {
    id?: number
    id_client: number
  }

  export type inm_billingUpdateManyMutationInput = {

  }

  export type inm_billingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_client?: IntFieldUpdateOperationsInput | number
  }

  export type inm_estateCreateInput = {
    address: string
    type: estate_type
    price: number
    owner: inm_ownerCreateNestedOneWithoutEstatesInput
    client: inm_clientCreateNestedOneWithoutEstateInput
  }

  export type inm_estateUncheckedCreateInput = {
    id?: number
    address: string
    type: estate_type
    price: number
    id_owner: number
    id_client: number
  }

  export type inm_estateUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    owner?: inm_ownerUpdateOneRequiredWithoutEstatesInput
    client?: inm_clientUpdateOneRequiredWithoutEstateInput
  }

  export type inm_estateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    id_owner?: IntFieldUpdateOperationsInput | number
    id_client?: IntFieldUpdateOperationsInput | number
  }

  export type inm_estateCreateManyInput = {
    id?: number
    address: string
    type: estate_type
    price: number
    id_owner: number
    id_client: number
  }

  export type inm_estateUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
  }

  export type inm_estateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    id_owner?: IntFieldUpdateOperationsInput | number
    id_client?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type inm_real_estateCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type inm_real_estateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type inm_real_estateMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type inm_real_estateMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type inm_real_estateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type Inm_ownerListRelationFilter = {
    every?: inm_ownerWhereInput
    some?: inm_ownerWhereInput
    none?: inm_ownerWhereInput
  }

  export type Inm_clientListRelationFilter = {
    every?: inm_clientWhereInput
    some?: inm_clientWhereInput
    none?: inm_clientWhereInput
  }

  export type inm_ownerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type inm_clientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type inm_userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
  }

  export type inm_userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type inm_userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
  }

  export type inm_userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
  }

  export type inm_userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Inm_userRelationFilter = {
    is?: inm_userWhereInput
    isNot?: inm_userWhereInput
  }

  export type Inm_estateListRelationFilter = {
    every?: inm_estateWhereInput
    some?: inm_estateWhereInput
    none?: inm_estateWhereInput
  }

  export type inm_estateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type inm_ownerCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type inm_ownerAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type inm_ownerMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type inm_ownerMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type inm_ownerSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type Inm_billingListRelationFilter = {
    every?: inm_billingWhereInput
    some?: inm_billingWhereInput
    none?: inm_billingWhereInput
  }

  export type inm_billingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type inm_clientCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type inm_clientAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type inm_clientMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type inm_clientMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type inm_clientSumOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
  }

  export type Inm_clientRelationFilter = {
    is?: inm_clientWhereInput
    isNot?: inm_clientWhereInput
  }

  export type inm_billingCountOrderByAggregateInput = {
    id?: SortOrder
    id_client?: SortOrder
  }

  export type inm_billingAvgOrderByAggregateInput = {
    id?: SortOrder
    id_client?: SortOrder
  }

  export type inm_billingMaxOrderByAggregateInput = {
    id?: SortOrder
    id_client?: SortOrder
  }

  export type inm_billingMinOrderByAggregateInput = {
    id?: SortOrder
    id_client?: SortOrder
  }

  export type inm_billingSumOrderByAggregateInput = {
    id?: SortOrder
    id_client?: SortOrder
  }

  export type Enumestate_typeFilter = {
    equals?: estate_type
    in?: Enumerable<estate_type>
    notIn?: Enumerable<estate_type>
    not?: NestedEnumestate_typeFilter | estate_type
  }

  export type Inm_ownerRelationFilter = {
    is?: inm_ownerWhereInput
    isNot?: inm_ownerWhereInput
  }

  export type inm_estateCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    type?: SortOrder
    price?: SortOrder
    id_owner?: SortOrder
    id_client?: SortOrder
  }

  export type inm_estateAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    id_owner?: SortOrder
    id_client?: SortOrder
  }

  export type inm_estateMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    type?: SortOrder
    price?: SortOrder
    id_owner?: SortOrder
    id_client?: SortOrder
  }

  export type inm_estateMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    type?: SortOrder
    price?: SortOrder
    id_owner?: SortOrder
    id_client?: SortOrder
  }

  export type inm_estateSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    id_owner?: SortOrder
    id_client?: SortOrder
  }

  export type Enumestate_typeWithAggregatesFilter = {
    equals?: estate_type
    in?: Enumerable<estate_type>
    notIn?: Enumerable<estate_type>
    not?: NestedEnumestate_typeWithAggregatesFilter | estate_type
    _count?: NestedIntFilter
    _min?: NestedEnumestate_typeFilter
    _max?: NestedEnumestate_typeFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type inm_ownerCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<inm_ownerCreateWithoutUserInput>, Enumerable<inm_ownerUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<inm_ownerCreateOrConnectWithoutUserInput>
    createMany?: inm_ownerCreateManyUserInputEnvelope
    connect?: Enumerable<inm_ownerWhereUniqueInput>
  }

  export type inm_clientCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<inm_clientCreateWithoutUserInput>, Enumerable<inm_clientUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<inm_clientCreateOrConnectWithoutUserInput>
    createMany?: inm_clientCreateManyUserInputEnvelope
    connect?: Enumerable<inm_clientWhereUniqueInput>
  }

  export type inm_ownerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<inm_ownerCreateWithoutUserInput>, Enumerable<inm_ownerUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<inm_ownerCreateOrConnectWithoutUserInput>
    createMany?: inm_ownerCreateManyUserInputEnvelope
    connect?: Enumerable<inm_ownerWhereUniqueInput>
  }

  export type inm_clientUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<inm_clientCreateWithoutUserInput>, Enumerable<inm_clientUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<inm_clientCreateOrConnectWithoutUserInput>
    createMany?: inm_clientCreateManyUserInputEnvelope
    connect?: Enumerable<inm_clientWhereUniqueInput>
  }

  export type inm_ownerUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<inm_ownerCreateWithoutUserInput>, Enumerable<inm_ownerUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<inm_ownerCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<inm_ownerUpsertWithWhereUniqueWithoutUserInput>
    createMany?: inm_ownerCreateManyUserInputEnvelope
    connect?: Enumerable<inm_ownerWhereUniqueInput>
    set?: Enumerable<inm_ownerWhereUniqueInput>
    disconnect?: Enumerable<inm_ownerWhereUniqueInput>
    delete?: Enumerable<inm_ownerWhereUniqueInput>
    update?: Enumerable<inm_ownerUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<inm_ownerUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<inm_ownerScalarWhereInput>
  }

  export type inm_clientUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<inm_clientCreateWithoutUserInput>, Enumerable<inm_clientUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<inm_clientCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<inm_clientUpsertWithWhereUniqueWithoutUserInput>
    createMany?: inm_clientCreateManyUserInputEnvelope
    connect?: Enumerable<inm_clientWhereUniqueInput>
    set?: Enumerable<inm_clientWhereUniqueInput>
    disconnect?: Enumerable<inm_clientWhereUniqueInput>
    delete?: Enumerable<inm_clientWhereUniqueInput>
    update?: Enumerable<inm_clientUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<inm_clientUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<inm_clientScalarWhereInput>
  }

  export type inm_ownerUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<inm_ownerCreateWithoutUserInput>, Enumerable<inm_ownerUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<inm_ownerCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<inm_ownerUpsertWithWhereUniqueWithoutUserInput>
    createMany?: inm_ownerCreateManyUserInputEnvelope
    connect?: Enumerable<inm_ownerWhereUniqueInput>
    set?: Enumerable<inm_ownerWhereUniqueInput>
    disconnect?: Enumerable<inm_ownerWhereUniqueInput>
    delete?: Enumerable<inm_ownerWhereUniqueInput>
    update?: Enumerable<inm_ownerUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<inm_ownerUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<inm_ownerScalarWhereInput>
  }

  export type inm_clientUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<inm_clientCreateWithoutUserInput>, Enumerable<inm_clientUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<inm_clientCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<inm_clientUpsertWithWhereUniqueWithoutUserInput>
    createMany?: inm_clientCreateManyUserInputEnvelope
    connect?: Enumerable<inm_clientWhereUniqueInput>
    set?: Enumerable<inm_clientWhereUniqueInput>
    disconnect?: Enumerable<inm_clientWhereUniqueInput>
    delete?: Enumerable<inm_clientWhereUniqueInput>
    update?: Enumerable<inm_clientUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<inm_clientUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<inm_clientScalarWhereInput>
  }

  export type inm_userCreateNestedOneWithoutOwnerInput = {
    create?: XOR<inm_userCreateWithoutOwnerInput, inm_userUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: inm_userCreateOrConnectWithoutOwnerInput
    connect?: inm_userWhereUniqueInput
  }

  export type inm_estateCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<inm_estateCreateWithoutOwnerInput>, Enumerable<inm_estateUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<inm_estateCreateOrConnectWithoutOwnerInput>
    createMany?: inm_estateCreateManyOwnerInputEnvelope
    connect?: Enumerable<inm_estateWhereUniqueInput>
  }

  export type inm_estateUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<inm_estateCreateWithoutOwnerInput>, Enumerable<inm_estateUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<inm_estateCreateOrConnectWithoutOwnerInput>
    createMany?: inm_estateCreateManyOwnerInputEnvelope
    connect?: Enumerable<inm_estateWhereUniqueInput>
  }

  export type inm_userUpdateOneRequiredWithoutOwnerInput = {
    create?: XOR<inm_userCreateWithoutOwnerInput, inm_userUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: inm_userCreateOrConnectWithoutOwnerInput
    upsert?: inm_userUpsertWithoutOwnerInput
    connect?: inm_userWhereUniqueInput
    update?: XOR<inm_userUpdateWithoutOwnerInput, inm_userUncheckedUpdateWithoutOwnerInput>
  }

  export type inm_estateUpdateManyWithoutOwnerInput = {
    create?: XOR<Enumerable<inm_estateCreateWithoutOwnerInput>, Enumerable<inm_estateUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<inm_estateCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<inm_estateUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: inm_estateCreateManyOwnerInputEnvelope
    connect?: Enumerable<inm_estateWhereUniqueInput>
    set?: Enumerable<inm_estateWhereUniqueInput>
    disconnect?: Enumerable<inm_estateWhereUniqueInput>
    delete?: Enumerable<inm_estateWhereUniqueInput>
    update?: Enumerable<inm_estateUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<inm_estateUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<inm_estateScalarWhereInput>
  }

  export type inm_estateUncheckedUpdateManyWithoutOwnerInput = {
    create?: XOR<Enumerable<inm_estateCreateWithoutOwnerInput>, Enumerable<inm_estateUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<inm_estateCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<inm_estateUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: inm_estateCreateManyOwnerInputEnvelope
    connect?: Enumerable<inm_estateWhereUniqueInput>
    set?: Enumerable<inm_estateWhereUniqueInput>
    disconnect?: Enumerable<inm_estateWhereUniqueInput>
    delete?: Enumerable<inm_estateWhereUniqueInput>
    update?: Enumerable<inm_estateUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<inm_estateUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<inm_estateScalarWhereInput>
  }

  export type inm_userCreateNestedOneWithoutClientInput = {
    create?: XOR<inm_userCreateWithoutClientInput, inm_userUncheckedCreateWithoutClientInput>
    connectOrCreate?: inm_userCreateOrConnectWithoutClientInput
    connect?: inm_userWhereUniqueInput
  }

  export type inm_billingCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<inm_billingCreateWithoutClientInput>, Enumerable<inm_billingUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<inm_billingCreateOrConnectWithoutClientInput>
    createMany?: inm_billingCreateManyClientInputEnvelope
    connect?: Enumerable<inm_billingWhereUniqueInput>
  }

  export type inm_estateCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<inm_estateCreateWithoutClientInput>, Enumerable<inm_estateUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<inm_estateCreateOrConnectWithoutClientInput>
    createMany?: inm_estateCreateManyClientInputEnvelope
    connect?: Enumerable<inm_estateWhereUniqueInput>
  }

  export type inm_billingUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<inm_billingCreateWithoutClientInput>, Enumerable<inm_billingUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<inm_billingCreateOrConnectWithoutClientInput>
    createMany?: inm_billingCreateManyClientInputEnvelope
    connect?: Enumerable<inm_billingWhereUniqueInput>
  }

  export type inm_estateUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<inm_estateCreateWithoutClientInput>, Enumerable<inm_estateUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<inm_estateCreateOrConnectWithoutClientInput>
    createMany?: inm_estateCreateManyClientInputEnvelope
    connect?: Enumerable<inm_estateWhereUniqueInput>
  }

  export type inm_userUpdateOneRequiredWithoutClientInput = {
    create?: XOR<inm_userCreateWithoutClientInput, inm_userUncheckedCreateWithoutClientInput>
    connectOrCreate?: inm_userCreateOrConnectWithoutClientInput
    upsert?: inm_userUpsertWithoutClientInput
    connect?: inm_userWhereUniqueInput
    update?: XOR<inm_userUpdateWithoutClientInput, inm_userUncheckedUpdateWithoutClientInput>
  }

  export type inm_billingUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<inm_billingCreateWithoutClientInput>, Enumerable<inm_billingUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<inm_billingCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<inm_billingUpsertWithWhereUniqueWithoutClientInput>
    createMany?: inm_billingCreateManyClientInputEnvelope
    connect?: Enumerable<inm_billingWhereUniqueInput>
    set?: Enumerable<inm_billingWhereUniqueInput>
    disconnect?: Enumerable<inm_billingWhereUniqueInput>
    delete?: Enumerable<inm_billingWhereUniqueInput>
    update?: Enumerable<inm_billingUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<inm_billingUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<inm_billingScalarWhereInput>
  }

  export type inm_estateUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<inm_estateCreateWithoutClientInput>, Enumerable<inm_estateUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<inm_estateCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<inm_estateUpsertWithWhereUniqueWithoutClientInput>
    createMany?: inm_estateCreateManyClientInputEnvelope
    connect?: Enumerable<inm_estateWhereUniqueInput>
    set?: Enumerable<inm_estateWhereUniqueInput>
    disconnect?: Enumerable<inm_estateWhereUniqueInput>
    delete?: Enumerable<inm_estateWhereUniqueInput>
    update?: Enumerable<inm_estateUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<inm_estateUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<inm_estateScalarWhereInput>
  }

  export type inm_billingUncheckedUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<inm_billingCreateWithoutClientInput>, Enumerable<inm_billingUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<inm_billingCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<inm_billingUpsertWithWhereUniqueWithoutClientInput>
    createMany?: inm_billingCreateManyClientInputEnvelope
    connect?: Enumerable<inm_billingWhereUniqueInput>
    set?: Enumerable<inm_billingWhereUniqueInput>
    disconnect?: Enumerable<inm_billingWhereUniqueInput>
    delete?: Enumerable<inm_billingWhereUniqueInput>
    update?: Enumerable<inm_billingUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<inm_billingUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<inm_billingScalarWhereInput>
  }

  export type inm_estateUncheckedUpdateManyWithoutClientInput = {
    create?: XOR<Enumerable<inm_estateCreateWithoutClientInput>, Enumerable<inm_estateUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<inm_estateCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<inm_estateUpsertWithWhereUniqueWithoutClientInput>
    createMany?: inm_estateCreateManyClientInputEnvelope
    connect?: Enumerable<inm_estateWhereUniqueInput>
    set?: Enumerable<inm_estateWhereUniqueInput>
    disconnect?: Enumerable<inm_estateWhereUniqueInput>
    delete?: Enumerable<inm_estateWhereUniqueInput>
    update?: Enumerable<inm_estateUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<inm_estateUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<inm_estateScalarWhereInput>
  }

  export type inm_clientCreateNestedOneWithoutBillingInput = {
    create?: XOR<inm_clientCreateWithoutBillingInput, inm_clientUncheckedCreateWithoutBillingInput>
    connectOrCreate?: inm_clientCreateOrConnectWithoutBillingInput
    connect?: inm_clientWhereUniqueInput
  }

  export type inm_clientUpdateOneRequiredWithoutBillingInput = {
    create?: XOR<inm_clientCreateWithoutBillingInput, inm_clientUncheckedCreateWithoutBillingInput>
    connectOrCreate?: inm_clientCreateOrConnectWithoutBillingInput
    upsert?: inm_clientUpsertWithoutBillingInput
    connect?: inm_clientWhereUniqueInput
    update?: XOR<inm_clientUpdateWithoutBillingInput, inm_clientUncheckedUpdateWithoutBillingInput>
  }

  export type inm_ownerCreateNestedOneWithoutEstatesInput = {
    create?: XOR<inm_ownerCreateWithoutEstatesInput, inm_ownerUncheckedCreateWithoutEstatesInput>
    connectOrCreate?: inm_ownerCreateOrConnectWithoutEstatesInput
    connect?: inm_ownerWhereUniqueInput
  }

  export type inm_clientCreateNestedOneWithoutEstateInput = {
    create?: XOR<inm_clientCreateWithoutEstateInput, inm_clientUncheckedCreateWithoutEstateInput>
    connectOrCreate?: inm_clientCreateOrConnectWithoutEstateInput
    connect?: inm_clientWhereUniqueInput
  }

  export type Enumestate_typeFieldUpdateOperationsInput = {
    set?: estate_type
  }

  export type inm_ownerUpdateOneRequiredWithoutEstatesInput = {
    create?: XOR<inm_ownerCreateWithoutEstatesInput, inm_ownerUncheckedCreateWithoutEstatesInput>
    connectOrCreate?: inm_ownerCreateOrConnectWithoutEstatesInput
    upsert?: inm_ownerUpsertWithoutEstatesInput
    connect?: inm_ownerWhereUniqueInput
    update?: XOR<inm_ownerUpdateWithoutEstatesInput, inm_ownerUncheckedUpdateWithoutEstatesInput>
  }

  export type inm_clientUpdateOneRequiredWithoutEstateInput = {
    create?: XOR<inm_clientCreateWithoutEstateInput, inm_clientUncheckedCreateWithoutEstateInput>
    connectOrCreate?: inm_clientCreateOrConnectWithoutEstateInput
    upsert?: inm_clientUpsertWithoutEstateInput
    connect?: inm_clientWhereUniqueInput
    update?: XOR<inm_clientUpdateWithoutEstateInput, inm_clientUncheckedUpdateWithoutEstateInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumestate_typeFilter = {
    equals?: estate_type
    in?: Enumerable<estate_type>
    notIn?: Enumerable<estate_type>
    not?: NestedEnumestate_typeFilter | estate_type
  }

  export type NestedEnumestate_typeWithAggregatesFilter = {
    equals?: estate_type
    in?: Enumerable<estate_type>
    notIn?: Enumerable<estate_type>
    not?: NestedEnumestate_typeWithAggregatesFilter | estate_type
    _count?: NestedIntFilter
    _min?: NestedEnumestate_typeFilter
    _max?: NestedEnumestate_typeFilter
  }

  export type inm_ownerCreateWithoutUserInput = {
    estates?: inm_estateCreateNestedManyWithoutOwnerInput
  }

  export type inm_ownerUncheckedCreateWithoutUserInput = {
    id?: number
    estates?: inm_estateUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type inm_ownerCreateOrConnectWithoutUserInput = {
    where: inm_ownerWhereUniqueInput
    create: XOR<inm_ownerCreateWithoutUserInput, inm_ownerUncheckedCreateWithoutUserInput>
  }

  export type inm_ownerCreateManyUserInputEnvelope = {
    data: Enumerable<inm_ownerCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type inm_clientCreateWithoutUserInput = {
    billing?: inm_billingCreateNestedManyWithoutClientInput
    estate?: inm_estateCreateNestedManyWithoutClientInput
  }

  export type inm_clientUncheckedCreateWithoutUserInput = {
    id?: number
    billing?: inm_billingUncheckedCreateNestedManyWithoutClientInput
    estate?: inm_estateUncheckedCreateNestedManyWithoutClientInput
  }

  export type inm_clientCreateOrConnectWithoutUserInput = {
    where: inm_clientWhereUniqueInput
    create: XOR<inm_clientCreateWithoutUserInput, inm_clientUncheckedCreateWithoutUserInput>
  }

  export type inm_clientCreateManyUserInputEnvelope = {
    data: Enumerable<inm_clientCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type inm_ownerUpsertWithWhereUniqueWithoutUserInput = {
    where: inm_ownerWhereUniqueInput
    update: XOR<inm_ownerUpdateWithoutUserInput, inm_ownerUncheckedUpdateWithoutUserInput>
    create: XOR<inm_ownerCreateWithoutUserInput, inm_ownerUncheckedCreateWithoutUserInput>
  }

  export type inm_ownerUpdateWithWhereUniqueWithoutUserInput = {
    where: inm_ownerWhereUniqueInput
    data: XOR<inm_ownerUpdateWithoutUserInput, inm_ownerUncheckedUpdateWithoutUserInput>
  }

  export type inm_ownerUpdateManyWithWhereWithoutUserInput = {
    where: inm_ownerScalarWhereInput
    data: XOR<inm_ownerUpdateManyMutationInput, inm_ownerUncheckedUpdateManyWithoutOwnerInput>
  }

  export type inm_ownerScalarWhereInput = {
    AND?: Enumerable<inm_ownerScalarWhereInput>
    OR?: Enumerable<inm_ownerScalarWhereInput>
    NOT?: Enumerable<inm_ownerScalarWhereInput>
    id?: IntFilter | number
    id_user?: IntFilter | number
  }

  export type inm_clientUpsertWithWhereUniqueWithoutUserInput = {
    where: inm_clientWhereUniqueInput
    update: XOR<inm_clientUpdateWithoutUserInput, inm_clientUncheckedUpdateWithoutUserInput>
    create: XOR<inm_clientCreateWithoutUserInput, inm_clientUncheckedCreateWithoutUserInput>
  }

  export type inm_clientUpdateWithWhereUniqueWithoutUserInput = {
    where: inm_clientWhereUniqueInput
    data: XOR<inm_clientUpdateWithoutUserInput, inm_clientUncheckedUpdateWithoutUserInput>
  }

  export type inm_clientUpdateManyWithWhereWithoutUserInput = {
    where: inm_clientScalarWhereInput
    data: XOR<inm_clientUpdateManyMutationInput, inm_clientUncheckedUpdateManyWithoutClientInput>
  }

  export type inm_clientScalarWhereInput = {
    AND?: Enumerable<inm_clientScalarWhereInput>
    OR?: Enumerable<inm_clientScalarWhereInput>
    NOT?: Enumerable<inm_clientScalarWhereInput>
    id?: IntFilter | number
    id_user?: IntFilter | number
  }

  export type inm_userCreateWithoutOwnerInput = {
    email: string
    first_name: string
    last_name: string
    client?: inm_clientCreateNestedManyWithoutUserInput
  }

  export type inm_userUncheckedCreateWithoutOwnerInput = {
    id?: number
    email: string
    first_name: string
    last_name: string
    client?: inm_clientUncheckedCreateNestedManyWithoutUserInput
  }

  export type inm_userCreateOrConnectWithoutOwnerInput = {
    where: inm_userWhereUniqueInput
    create: XOR<inm_userCreateWithoutOwnerInput, inm_userUncheckedCreateWithoutOwnerInput>
  }

  export type inm_estateCreateWithoutOwnerInput = {
    address: string
    type: estate_type
    price: number
    client: inm_clientCreateNestedOneWithoutEstateInput
  }

  export type inm_estateUncheckedCreateWithoutOwnerInput = {
    id?: number
    address: string
    type: estate_type
    price: number
    id_client: number
  }

  export type inm_estateCreateOrConnectWithoutOwnerInput = {
    where: inm_estateWhereUniqueInput
    create: XOR<inm_estateCreateWithoutOwnerInput, inm_estateUncheckedCreateWithoutOwnerInput>
  }

  export type inm_estateCreateManyOwnerInputEnvelope = {
    data: Enumerable<inm_estateCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type inm_userUpsertWithoutOwnerInput = {
    update: XOR<inm_userUpdateWithoutOwnerInput, inm_userUncheckedUpdateWithoutOwnerInput>
    create: XOR<inm_userCreateWithoutOwnerInput, inm_userUncheckedCreateWithoutOwnerInput>
  }

  export type inm_userUpdateWithoutOwnerInput = {
    email?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    client?: inm_clientUpdateManyWithoutUserInput
  }

  export type inm_userUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    client?: inm_clientUncheckedUpdateManyWithoutUserInput
  }

  export type inm_estateUpsertWithWhereUniqueWithoutOwnerInput = {
    where: inm_estateWhereUniqueInput
    update: XOR<inm_estateUpdateWithoutOwnerInput, inm_estateUncheckedUpdateWithoutOwnerInput>
    create: XOR<inm_estateCreateWithoutOwnerInput, inm_estateUncheckedCreateWithoutOwnerInput>
  }

  export type inm_estateUpdateWithWhereUniqueWithoutOwnerInput = {
    where: inm_estateWhereUniqueInput
    data: XOR<inm_estateUpdateWithoutOwnerInput, inm_estateUncheckedUpdateWithoutOwnerInput>
  }

  export type inm_estateUpdateManyWithWhereWithoutOwnerInput = {
    where: inm_estateScalarWhereInput
    data: XOR<inm_estateUpdateManyMutationInput, inm_estateUncheckedUpdateManyWithoutEstatesInput>
  }

  export type inm_estateScalarWhereInput = {
    AND?: Enumerable<inm_estateScalarWhereInput>
    OR?: Enumerable<inm_estateScalarWhereInput>
    NOT?: Enumerable<inm_estateScalarWhereInput>
    id?: IntFilter | number
    address?: StringFilter | string
    type?: Enumestate_typeFilter | estate_type
    price?: IntFilter | number
    id_owner?: IntFilter | number
    id_client?: IntFilter | number
  }

  export type inm_userCreateWithoutClientInput = {
    email: string
    first_name: string
    last_name: string
    owner?: inm_ownerCreateNestedManyWithoutUserInput
  }

  export type inm_userUncheckedCreateWithoutClientInput = {
    id?: number
    email: string
    first_name: string
    last_name: string
    owner?: inm_ownerUncheckedCreateNestedManyWithoutUserInput
  }

  export type inm_userCreateOrConnectWithoutClientInput = {
    where: inm_userWhereUniqueInput
    create: XOR<inm_userCreateWithoutClientInput, inm_userUncheckedCreateWithoutClientInput>
  }

  export type inm_billingCreateWithoutClientInput = {

  }

  export type inm_billingUncheckedCreateWithoutClientInput = {
    id?: number
  }

  export type inm_billingCreateOrConnectWithoutClientInput = {
    where: inm_billingWhereUniqueInput
    create: XOR<inm_billingCreateWithoutClientInput, inm_billingUncheckedCreateWithoutClientInput>
  }

  export type inm_billingCreateManyClientInputEnvelope = {
    data: Enumerable<inm_billingCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type inm_estateCreateWithoutClientInput = {
    address: string
    type: estate_type
    price: number
    owner: inm_ownerCreateNestedOneWithoutEstatesInput
  }

  export type inm_estateUncheckedCreateWithoutClientInput = {
    id?: number
    address: string
    type: estate_type
    price: number
    id_owner: number
  }

  export type inm_estateCreateOrConnectWithoutClientInput = {
    where: inm_estateWhereUniqueInput
    create: XOR<inm_estateCreateWithoutClientInput, inm_estateUncheckedCreateWithoutClientInput>
  }

  export type inm_estateCreateManyClientInputEnvelope = {
    data: Enumerable<inm_estateCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type inm_userUpsertWithoutClientInput = {
    update: XOR<inm_userUpdateWithoutClientInput, inm_userUncheckedUpdateWithoutClientInput>
    create: XOR<inm_userCreateWithoutClientInput, inm_userUncheckedCreateWithoutClientInput>
  }

  export type inm_userUpdateWithoutClientInput = {
    email?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    owner?: inm_ownerUpdateManyWithoutUserInput
  }

  export type inm_userUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    owner?: inm_ownerUncheckedUpdateManyWithoutUserInput
  }

  export type inm_billingUpsertWithWhereUniqueWithoutClientInput = {
    where: inm_billingWhereUniqueInput
    update: XOR<inm_billingUpdateWithoutClientInput, inm_billingUncheckedUpdateWithoutClientInput>
    create: XOR<inm_billingCreateWithoutClientInput, inm_billingUncheckedCreateWithoutClientInput>
  }

  export type inm_billingUpdateWithWhereUniqueWithoutClientInput = {
    where: inm_billingWhereUniqueInput
    data: XOR<inm_billingUpdateWithoutClientInput, inm_billingUncheckedUpdateWithoutClientInput>
  }

  export type inm_billingUpdateManyWithWhereWithoutClientInput = {
    where: inm_billingScalarWhereInput
    data: XOR<inm_billingUpdateManyMutationInput, inm_billingUncheckedUpdateManyWithoutBillingInput>
  }

  export type inm_billingScalarWhereInput = {
    AND?: Enumerable<inm_billingScalarWhereInput>
    OR?: Enumerable<inm_billingScalarWhereInput>
    NOT?: Enumerable<inm_billingScalarWhereInput>
    id?: IntFilter | number
    id_client?: IntFilter | number
  }

  export type inm_estateUpsertWithWhereUniqueWithoutClientInput = {
    where: inm_estateWhereUniqueInput
    update: XOR<inm_estateUpdateWithoutClientInput, inm_estateUncheckedUpdateWithoutClientInput>
    create: XOR<inm_estateCreateWithoutClientInput, inm_estateUncheckedCreateWithoutClientInput>
  }

  export type inm_estateUpdateWithWhereUniqueWithoutClientInput = {
    where: inm_estateWhereUniqueInput
    data: XOR<inm_estateUpdateWithoutClientInput, inm_estateUncheckedUpdateWithoutClientInput>
  }

  export type inm_estateUpdateManyWithWhereWithoutClientInput = {
    where: inm_estateScalarWhereInput
    data: XOR<inm_estateUpdateManyMutationInput, inm_estateUncheckedUpdateManyWithoutEstateInput>
  }

  export type inm_clientCreateWithoutBillingInput = {
    user: inm_userCreateNestedOneWithoutClientInput
    estate?: inm_estateCreateNestedManyWithoutClientInput
  }

  export type inm_clientUncheckedCreateWithoutBillingInput = {
    id?: number
    id_user: number
    estate?: inm_estateUncheckedCreateNestedManyWithoutClientInput
  }

  export type inm_clientCreateOrConnectWithoutBillingInput = {
    where: inm_clientWhereUniqueInput
    create: XOR<inm_clientCreateWithoutBillingInput, inm_clientUncheckedCreateWithoutBillingInput>
  }

  export type inm_clientUpsertWithoutBillingInput = {
    update: XOR<inm_clientUpdateWithoutBillingInput, inm_clientUncheckedUpdateWithoutBillingInput>
    create: XOR<inm_clientCreateWithoutBillingInput, inm_clientUncheckedCreateWithoutBillingInput>
  }

  export type inm_clientUpdateWithoutBillingInput = {
    user?: inm_userUpdateOneRequiredWithoutClientInput
    estate?: inm_estateUpdateManyWithoutClientInput
  }

  export type inm_clientUncheckedUpdateWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    estate?: inm_estateUncheckedUpdateManyWithoutClientInput
  }

  export type inm_ownerCreateWithoutEstatesInput = {
    user: inm_userCreateNestedOneWithoutOwnerInput
  }

  export type inm_ownerUncheckedCreateWithoutEstatesInput = {
    id?: number
    id_user: number
  }

  export type inm_ownerCreateOrConnectWithoutEstatesInput = {
    where: inm_ownerWhereUniqueInput
    create: XOR<inm_ownerCreateWithoutEstatesInput, inm_ownerUncheckedCreateWithoutEstatesInput>
  }

  export type inm_clientCreateWithoutEstateInput = {
    user: inm_userCreateNestedOneWithoutClientInput
    billing?: inm_billingCreateNestedManyWithoutClientInput
  }

  export type inm_clientUncheckedCreateWithoutEstateInput = {
    id?: number
    id_user: number
    billing?: inm_billingUncheckedCreateNestedManyWithoutClientInput
  }

  export type inm_clientCreateOrConnectWithoutEstateInput = {
    where: inm_clientWhereUniqueInput
    create: XOR<inm_clientCreateWithoutEstateInput, inm_clientUncheckedCreateWithoutEstateInput>
  }

  export type inm_ownerUpsertWithoutEstatesInput = {
    update: XOR<inm_ownerUpdateWithoutEstatesInput, inm_ownerUncheckedUpdateWithoutEstatesInput>
    create: XOR<inm_ownerCreateWithoutEstatesInput, inm_ownerUncheckedCreateWithoutEstatesInput>
  }

  export type inm_ownerUpdateWithoutEstatesInput = {
    user?: inm_userUpdateOneRequiredWithoutOwnerInput
  }

  export type inm_ownerUncheckedUpdateWithoutEstatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
  }

  export type inm_clientUpsertWithoutEstateInput = {
    update: XOR<inm_clientUpdateWithoutEstateInput, inm_clientUncheckedUpdateWithoutEstateInput>
    create: XOR<inm_clientCreateWithoutEstateInput, inm_clientUncheckedCreateWithoutEstateInput>
  }

  export type inm_clientUpdateWithoutEstateInput = {
    user?: inm_userUpdateOneRequiredWithoutClientInput
    billing?: inm_billingUpdateManyWithoutClientInput
  }

  export type inm_clientUncheckedUpdateWithoutEstateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    billing?: inm_billingUncheckedUpdateManyWithoutClientInput
  }

  export type inm_ownerCreateManyUserInput = {
    id?: number
  }

  export type inm_clientCreateManyUserInput = {
    id?: number
  }

  export type inm_ownerUpdateWithoutUserInput = {
    estates?: inm_estateUpdateManyWithoutOwnerInput
  }

  export type inm_ownerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    estates?: inm_estateUncheckedUpdateManyWithoutOwnerInput
  }

  export type inm_ownerUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type inm_clientUpdateWithoutUserInput = {
    billing?: inm_billingUpdateManyWithoutClientInput
    estate?: inm_estateUpdateManyWithoutClientInput
  }

  export type inm_clientUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    billing?: inm_billingUncheckedUpdateManyWithoutClientInput
    estate?: inm_estateUncheckedUpdateManyWithoutClientInput
  }

  export type inm_clientUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type inm_estateCreateManyOwnerInput = {
    id?: number
    address: string
    type: estate_type
    price: number
    id_client: number
  }

  export type inm_estateUpdateWithoutOwnerInput = {
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    client?: inm_clientUpdateOneRequiredWithoutEstateInput
  }

  export type inm_estateUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    id_client?: IntFieldUpdateOperationsInput | number
  }

  export type inm_estateUncheckedUpdateManyWithoutEstatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    id_client?: IntFieldUpdateOperationsInput | number
  }

  export type inm_billingCreateManyClientInput = {
    id?: number
  }

  export type inm_estateCreateManyClientInput = {
    id?: number
    address: string
    type: estate_type
    price: number
    id_owner: number
  }

  export type inm_billingUpdateWithoutClientInput = {

  }

  export type inm_billingUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type inm_billingUncheckedUpdateManyWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type inm_estateUpdateWithoutClientInput = {
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    owner?: inm_ownerUpdateOneRequiredWithoutEstatesInput
  }

  export type inm_estateUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    id_owner?: IntFieldUpdateOperationsInput | number
  }

  export type inm_estateUncheckedUpdateManyWithoutEstateInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    type?: Enumestate_typeFieldUpdateOperationsInput | estate_type
    price?: IntFieldUpdateOperationsInput | number
    id_owner?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}